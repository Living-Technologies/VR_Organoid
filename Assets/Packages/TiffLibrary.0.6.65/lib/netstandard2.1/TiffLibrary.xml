<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TiffLibrary</name>
    </assembly>
    <members>
        <member name="T:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm">
            <summary>
            Decompression support for CCITT T.4 bi-level encoding (1-dimensional).
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm.#ctor(System.Boolean)">
            <summary>
            Initialize the instance with specified fill order.
            </summary>
            <param name="higherOrderBitsFirst">If this flag is set, higher order bits are considered to precede lower order bits when reading bits from a byte.</param>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm.GetSharedInstance(TiffLibrary.TiffFillOrder)">
            <summary>
            Get static cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm"/>.
            </summary>
            <param name="fillOrder">The FillOrder tag specified in the image file directory.</param>
            <returns>A cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm"/>.</returns>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3OneDimensionalCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm">
            <summary>
            Decompression support for CCITT T.4 bi-level encoding  (2-dimensional).
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm.#ctor(System.Boolean)">
            <summary>
            Initialize the instance with specified fill order.
            </summary>
            <param name="higherOrderBitsFirst">If this flag is set, higher order bits are considered to precede lower order bits when reading bits from a byte.</param>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm.GetSharedInstance(TiffLibrary.TiffFillOrder)">
            <summary>
            Get static cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm"/>.
            </summary>
            <param name="fillOrder">The FillOrder tag specified in the image file directory.</param>
            <returns>A cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm"/>.</returns>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup3TwoDimensionalCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.CcittGroup4Compression">
            <summary>
            Decompression support for CCITT T.6 bi-level encoding.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup4Compression.#ctor(System.Boolean)">
            <summary>
            Initialize the instance with specified fill order.
            </summary>
            <param name="higherOrderBitsFirst">If this flag is set, higher order bits are considered to precede lower order bits when reading bits from a byte.</param>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup4Compression.GetSharedInstance(TiffLibrary.TiffFillOrder)">
            <summary>
            Get static cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup4Compression"/>.
            </summary>
            <param name="fillOrder">The FillOrder tag specified in the image file directory.</param>
            <returns>A cached instance of <see cref="T:TiffLibrary.Compression.CcittGroup4Compression"/>.</returns>
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup4Compression.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.CcittGroup4Compression.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.DeflateCompressionAlgorithm">
            <summary>
            Compression and decompression support for Deflate algorithm.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.DeflateCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.DeflateCompressionAlgorithm"/> using default compression level. When decompressing or compressing using default level, this instance can be used to avoid an extra allocation of <see cref="T:TiffLibrary.Compression.DeflateCompressionAlgorithm"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.DeflateCompressionAlgorithm.#ctor(TiffLibrary.Compression.TiffDeflateCompressionLevel)">
            <summary>
            Initialize the object with the specified compression level.
            </summary>
            <param name="compressionLevel"></param>
        </member>
        <member name="M:TiffLibrary.Compression.DeflateCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.DeflateCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.ITiffDecompressionAlgorithm">
            <summary>
            Represents an object that is capable of decompressing image data in TIFF file.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.ITiffDecompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <summary>
            Decompress the image data.
            </summary>
            <param name="context">Information about the TIFF file.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <returns>The number of bytes written to <paramref name="output"/>.</returns>
        </member>
        <member name="T:TiffLibrary.Compression.ITiffCompressionAlgorithm">
            <summary>
            Represents an object that is capable of compressing image data into TIFF file.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.ITiffCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Compress image data.
            </summary>
            <param name="context">Information about the TIFF file.</param>
            <param name="input">The input data.</param>
            <param name="outputWriter">The output writer.</param>
        </member>
        <member name="T:TiffLibrary.Compression.JpegCompressionAlgorithm">
            <summary>
            Compression support for JPEG.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.JpegCompressionAlgorithm.#ctor(TiffLibrary.TiffPhotometricInterpretation,System.Int32)">
            <summary>
            Initialize the object.
            </summary>
            <param name="photometricInterpretation">The expected photometric interpretation.</param>
            <param name="quality">The quality factor to use when generating quantization table.</param>
        </member>
        <member name="M:TiffLibrary.Compression.JpegCompressionAlgorithm.#ctor(TiffLibrary.TiffPhotometricInterpretation,System.Int32,System.Int32,TiffLibrary.ImageEncoder.TiffJpegEncodingOptions)">
            <summary>
            Initialize the object.
            </summary>
            <param name="photometricInterpretation">The expected photometric interpretation.</param>
            <param name="horizontalSubsampling">The horizontal subsampling factor for YCbCr image.</param>
            <param name="verticalSubsampling">The vertical subsampling factor for YCbCr image.</param>
            <param name="options">Options to use when encoding with JPEG compression.</param>
        </member>
        <member name="M:TiffLibrary.Compression.JpegCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.JpegCompressionAlgorithm.GetTableWriter``1">
            <summary>
            The middleware that can be used to write JPEGTables field. It should be added to the encoding pipeline if useSharedJpegTables is set to true in the constructor.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <returns>The middleware to write JPEGTables field</returns>
        </member>
        <member name="T:TiffLibrary.Compression.JpegDecompressionAlgorithm">
            <summary>
            Decompression support for JPEG.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.JpegDecompressionAlgorithm.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initialize the object.
            </summary>
            <param name="jpegTables">The JPEGTables field specified in the image file directory.</param>
            <param name="numberOfComponents">The number of component to be expected.</param>
        </member>
        <member name="M:TiffLibrary.Compression.JpegDecompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.LzwCompressionAlgorithm">
            <summary>
            Compression and decompression support for LZW algorithm.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.LzwCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.LzwCompressionAlgorithm"/>. It should be used across the application.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.LzwCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.LzwCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm">
            <summary>
            Decompression support for CCITT Group 3 1-Dimensional Modified Huffman run length encoding.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm.#ctor(System.Boolean)">
            <summary>
            Initialize the instance with specified fill order.
            </summary>
            <param name="higherOrderBitsFirst">If this flag is set, higher order bits are considered to precede lower order bits when reading bits from a byte.</param>
        </member>
        <member name="M:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm.GetSharedInstance(TiffLibrary.TiffFillOrder)">
            <summary>
            Get static cached instance of <see cref="T:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm"/>.
            </summary>
            <param name="fillOrder">The FillOrder tag specified in the image file directory.</param>
            <returns>A cached instance of <see cref="T:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm"/>.</returns>
        </member>
        <member name="M:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.ModifiedHuffmanCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.NeXTCompressionAlgorithm">
            <summary>
            Compression and decompression support for NeXT 2-bit Grey Scale compression algorithm.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.NeXTCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.NeXTCompressionAlgorithm"/>. It should be used across the application.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.NeXTCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.NeXTCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.NoneCompressionAlgorithm">
            <summary>
            Support for Compression=1
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.NoneCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.NoneCompressionAlgorithm"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.NoneCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.NoneCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.PackBitsCompressionAlgorithm">
            <summary>
            Compression and decompression support for PackBits algorithm.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.PackBitsCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.PackBitsCompressionAlgorithm"/>. It should be used across the application.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.PackBitsCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.PackBitsCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.ThunderScanCompressionAlgorithm">
            <summary>
            Compression and decompression support for ThunderScan 4-bit compression algorithm.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.ThunderScanCompressionAlgorithm.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.Compression.ThunderScanCompressionAlgorithm"/>. It should be used across the application.
            </summary>
        </member>
        <member name="M:TiffLibrary.Compression.ThunderScanCompressionAlgorithm.Compress(TiffLibrary.Compression.TiffCompressionContext,System.ReadOnlyMemory{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Compression.ThunderScanCompressionAlgorithm.Decompress(TiffLibrary.Compression.TiffDecompressionContext,System.ReadOnlyMemory{System.Byte},System.Memory{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Compression.TiffCompressionContext">
            <summary>
            Information of the image to be encoded.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffCompressionContext.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffCompressionContext.PhotometricInterpretation">
            <summary>
            The photometric interpretation.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffCompressionContext.BitsPerSample">
            <summary>
            Bits per sample.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffCompressionContext.ImageSize">
            <summary>
            The size of the image.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffCompressionContext.BytesPerScanline">
            <summary>
            The calculated byte count per scanline.
            </summary>
        </member>
        <member name="T:TiffLibrary.Compression.TiffDecompressionContext">
            <summary>
            Information of the image file directory.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.PhotometricInterpretation">
            <summary>
            The photometric interpretation.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.BitsPerSample">
            <summary>
            Bits per sample.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.ImageSize">
            <summary>
            The size of the image.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.BytesPerScanline">
            <summary>
            The calculated byte count per scanline.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.SkippedScanlines">
            <summary>
            The number of scanlines that can be skipped when decompressing.
            </summary>
        </member>
        <member name="P:TiffLibrary.Compression.TiffDecompressionContext.RequestedScanlines">
            <summary>
            The number of scanlines that are actually required to be decompressed.
            </summary>
        </member>
        <member name="T:TiffLibrary.Compression.TiffDeflateCompressionLevel">
            <summary>
            The compression level used in Deflate algorithm. A value of 9 is best, and 1 is least compression. The default is 6.
            </summary>
        </member>
        <member name="F:TiffLibrary.Compression.TiffDeflateCompressionLevel.Optimal">
            <summary>
            Optimal.
            </summary>
        </member>
        <member name="F:TiffLibrary.Compression.TiffDeflateCompressionLevel.Fastest">
            <summary>
            Fatest.
            </summary>
        </member>
        <member name="F:TiffLibrary.Compression.TiffDeflateCompressionLevel.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:TiffLibrary.Compression.TiffDeflateCompressionLevel.NoCompression">
            <summary>
            NoCompression.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffCleanFaxData">
            <summary>
            Regenerated line info.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCleanFaxData.Clean">
            <summary>
            No errors detected.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCleanFaxData.Regenerated">
            <summary>
            Receiver regenerated lines.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCleanFaxData.Unclean">
            <summary>
            Uncorrected errors exist.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffCompression">
            <summary>
            Compression type.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.Unspecified">
            <summary>
            Compression type is not specified.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.NoCompression">
            <summary>
            No compression, but pack data into bytes as tightly as possible, leaving no unused bits (except at the end of a row). The component values are stored as an array of type BYTE. Each scan line (row) is padded to the next BYTE boundary.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.ModifiedHuffmanCompression">
            <summary>
            CCITT Group 3 1-Dimensional Modified Huffman run length encoding. See Section 10 for a description of Modified Huffman Compression.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.T4Encoding">
            <summary>
            CCITT T.4 bi-level encoding as specified in section 4, Coding, of CCITT Recommendation T.4: “Standardization of Group 3 Facsimile apparatus for document transmission.” International Telephone and Telegraph Consultative Committee (CCITT, Geneva: 1988).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.T6Encoding">
            <summary>
            CCITT T.6 bi-level encoding as specified in section 2 of CCITT Recommendation T.6: “Facsimile coding schemes and coding control functions for Group 4 facsimile apparatus.” International Telephone and Telegraph Consultative Committee (CCITT, Geneva: 1988).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.Lzw">
            <summary>
            LZW compression.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.OldJpeg">
            <summary>
            Obsoleted JPEG compression as specified in section 22 of TIFF 6.0 Specification.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.Jpeg">
            <summary>
            JPEG compression (see Adobe Photoshop® TIFF Technical Notes (March 22, 2002)).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.Deflate">
            <summary>
            Deflate compression, using zlib data format (see Adobe Photoshop® TIFF Technical Notes (March 22, 2002)).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.PackBits">
            <summary>
            PackBits compression, a simple byte-oriented run length scheme.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.OldDeflate">
            <summary>
            Deflate compression - old.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.ThunderScan">
            <summary>
            ThunderScan 4-bit compression.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffCompression.NeXT">
            <summary>
            NeXT 2-bit Grey Scale compression algorithm
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffExtraSample">
            <summary>
            Specifies that each pixel has m extra components whose interpretation is defined by one of the values listed below. When this field is used, the SamplesPerPixel field has a value greater than the PhotometricInterpretation field suggests.
            ExtraSamples is typically used to include non-color information, such as opacity, in an image.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffExtraSample.UnspecifiedData">
            <summary>
            Unspecified data.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffExtraSample.AssociatedAlphaData">
            <summary>
            Associated alpha data (with pre-multiplied color).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffExtraSample.UnassociatedAlphaData">
            <summary>
            Unassociated alpha data.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffFieldType">
            <summary>
            TIFF IFD Field Type
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Byte">
            <summary>
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.ASCII">
            <summary>
            8-bit byte that contains a 7-bit ASCII code; the last byte must be NUL (binary zero).
            The value of the Count part of an ASCII field entry includes the NUL. If padding is necessary, the Count does not include the pad byte. Note that there is no initial “count byte” as in Pascal-style strings.
            Any ASCII field can contain multiple strings, each terminated with a NUL. A single string is preferred whenever possible. The Count for multi-string fields is the number of bytes in all the strings in that field plus their terminating NUL bytes. Only one NUL is allowed between strings, so that the strings following the first string will often begin on an odd byte.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Short">
            <summary>
            16-bit (2-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Long">
            <summary>
            32-bit (4-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Rational">
            <summary>
            Two LONGs:  the first represents the numerator of a fraction; the second, the denominator.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.SByte">
            <summary>
            An 8-bit signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Undefined">
            <summary>
            An 8-bit byte that may contain anything, depending on the definition of the field.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.SShort">
            <summary>
            A 16-bit (2-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.SLong">
            <summary>
            A 32-bit (4-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.SRational">
            <summary>
            Two SLONG’s:  the first represents the numerator of a fraction, the second the denominator. 
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Float">
            <summary>
            Single precision (4-byte) IEEE format.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Double">
            <summary>
            Double precision (8-byte) IEEE format.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.IFD">
            <summary>
            32-bit unsigned integer (offset)
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.Long8">
            <summary>
            BigTiff: 64-bit unsigned integer
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.SLong8">
            <summary>
            BigTiff: 64-bit signed integer
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFieldType.IFD8">
            <summary>
            BigTiff: 64-bit IFD offset
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffFillOrder">
            <summary>
            The logical order of bits within a byte.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFillOrder.HigherOrderBitsFirst">
            <summary>
            pixels are arranged within a byte such that pixels with lower column values are stored in the higher-order bits of the byte.
            1-bit uncompressed data example: Pixel 0 of a row is stored in the high-order bit of byte 0, pixel 1 is stored in the next-highest bit, ..., pixel 7 is stored in the loworder bit of byte 0, pixel 8 is stored in the high-order bit of byte 1, and so on.
            CCITT 1-bit compressed data example: The high-order bit of the first compression code is stored in the high-order bit of byte 0, the next-highest bit of the first compression code is stored in the next-highest bit of byte 0, and so on.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffFillOrder.LowerOrderBitsFirst">
            <summary>
            pixels are arranged within a byte such that pixels with lower column values are stored in the lower-order bits of the byte.
            We recommend that FillOrder=2 be used only in special-purpose applications. It is easy and inexpensive for writers to reverse bit order by using a 256-byte lookup table. FillOrder = 2 should be used only when BitsPerSample = 1 and the data is either uncompressed or compressed using CCITT 1D or 2D compression, to avoid potentially ambigous situations.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffGrayResponseUnit">
            <summary>
            The precision of the information contained in the GrayResponseCurve.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffGrayResponseUnit.Tenths">
            <summary>
            Number represents tenths of a unit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffGrayResponseUnit.Hundredths">
            <summary>
            Number represents hundredths of a unit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffGrayResponseUnit.Thousandths">
            <summary>
            Number represents thousandths of a unit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffGrayResponseUnit.TenThousandths">
            <summary>
            Number represents ten-thousandths of a unit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffGrayResponseUnit.HundredThousandths">
            <summary>
            Number represents hundred-thousandths of a unit.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffInkSet">
            <summary>
            The set of inks used in a separated (PhotometricInterpretation=5) image.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffInkSet.CMYK">
            <summary>
            The order of the components is cyan, magenta, yellow, black. Usually, a value of 0 represents 0% ink coverage and a value of 255 represents 100% ink coverage for that component, but see DotRange below. The InkNames field should not exist when InkSet=1.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffInkSet.NotCMYK">
            <summary>
            Not CMYK. See the InkNames field for a description of the inks to be used.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffNewSubfileType">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffNewSubfileType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffNewSubfileType.ReducedResolution">
            <summary>
            Bit 0 is 1 if the image is a reduced-resolution version of another image in this TIFF file; else the bit is 0.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffNewSubfileType.Page">
            <summary>
            Bit 1 is 1 if the image is a single page of a multi-page image (see the PageNumber field description); else the bit is 0.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffNewSubfileType.TransparencyMask">
            <summary>
            Bit 2 is 1 if the image defines a transparency mask for another image in this TIFF file. The PhotometricInterpretation value must be 4, designating a transparency mask.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffOrientation">
            <summary>
            The orientation of the image with respect to the rows and columns.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.TopLeft">
            <summary>
            The 0th row represents the visual top of the image, and the 0th column represents the visual left-hand side.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.TopRight">
            <summary>
            The 0th row represents the visual top of the image, and the 0th column represents the visual right-hand side.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.BottomRight">
            <summary>
             The 0th row represents the visual bottom of the image, and the 0th column represents the visual right-hand side.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.BottomLeft">
            <summary>
            The 0th row represents the visual bottom of the image, and the 0th column represents the visual left-hand side.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.LeftTop">
            <summary>
            The 0th row represents the visual left-hand side of the image, and the 0th column represents the visual top.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.RightTop">
            <summary>
            The 0th row represents the visual right-hand side of the image, and the 0th column represents the visual top.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.RightBottom">
            <summary>
            The 0th row represents the visual right-hand side of the image, and the 0th column represents the visual bottom.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffOrientation.LeftBottom">
            <summary>
            The 0th row represents the visual left-hand side of the image, and the 0th column represents the visual bottom.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffPhotometricInterpretation">
            <summary>
            The color space of the image data.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.WhiteIsZero">
            <summary>
            Represents bilevel and grayscale images:  0 is imaged as white. 2**BitsPerSample-1 is imaged as black. This is the normal value for Compression=2.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.BlackIsZero">
            <summary>
            Represents bilevel and grayscale images:  0 is imaged as black. 2**BitsPerSample-1 is imaged as white. If this value is specified for Compression=2, the image should display and print reversed.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.RGB">
            <summary>
            Represents RGB images. In the RGB model, a color is described as a combination of the three primary colors of light (red, green, and blue) in particular concentrations. For each of the three components, 0 represents minimum intensity, and 2**BitsPerSample - 1 represents maximum intensity. Thus an RGB value of (0,0,0) represents black, and (255,255,255) represents white, assuming 8-bit components. For PlanarConfiguration = 1, the components are stored in the indicated order:  first Red, then Green, then Blue. For PlanarConfiguration = 2, the StripOffsets for the component planes are stored in the indicated order:  first the Red component plane StripOffsets, then the Green plane StripOffsets, then the Blue plane StripOffsets.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.PaletteColor">
            <summary>
            Represents palette images. In this model, a color is described with a single component. The value of the component is used as an index into the red, green and blue curves in the ColorMap field to retrieve an RGB triplet that defines the color. When PhotometricInterpretation=3 is used, ColorMap must be present and SamplesPerPixel must be 1.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.TransparencyMask">
            <summary>
            This means that the image is used to define an irregularly shaped region of another image in the same TIFF file. SamplesPerPixel and BitsPerSample must be 1. PackBits compression is recommended. The 1-bits define the interior of the region; the 0-bits define the exterior of the region.
            A reader application can use the mask to determine which parts of the image to display. Main image pixels that correspond to 1-bits in the transparency mask are imaged to the screen or printer, but main image pixels that correspond to 0-bits in the mask are not displayed or printed.
            The image mask is typically at a higher resolution than the main image, if the main image is grayscale or color so that the edges can be sharp.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.Seperated">
            <summary>
            The components represent the desired percent dot coverage of each ink, where the larger component values represent a higher percentage of ink dot coverage and smaller values represent less coverage.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPhotometricInterpretation.YCbCr">
            <summary>
            Represents YCbCr images.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffPlanarConfiguration">
            <summary>
            How the components of each pixel are stored. Default is 1 (Chunky). See also BitsPerSample, SamplesPerPixel.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPlanarConfiguration.Chunky">
            <summary>
            The component values for each pixel are stored contiguously. The order of the components within the pixel is specified by PhotometricInterpretation. For example, for RGB data, the data is stored as RGBRGBRGB…
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPlanarConfiguration.Planar">
            <summary>
            The components are stored in separate “component planes.”  The values in StripOffsets and StripByteCounts are then arranged as a 2-dimensional array, with SamplesPerPixel rows and StripsPerImage columns. (All of the columns for row 0 are stored first, followed by the columns of row 1, and so on.) PhotometricInterpretation describes the type of data stored in each component plane. For example, RGB data is stored with the Red components in one component plane, the Green in another, and the Blue in another.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffPredictor">
            <summary>
            A predictor is a mathematical operator that is applied to the image data before an encoding scheme is applied. Currently this field is used only with LZW (Compression=5) encoding because LZW is probably the only TIFF encoding scheme that benefits significantly from a predictor step. See Section 13.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPredictor.None">
            <summary>
            No prediction scheme used before coding.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffPredictor.HorizontalDifferencing">
            <summary>
            Horizontal differencing.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffResolutionUnit">
            <summary>
            The unit of measurement for XResolution and YResolution.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffResolutionUnit.None">
            <summary>
            No absolute unit of measurement. Used for images that may have a non-square aspect ratio, but no meaningful absolute dimensions.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffResolutionUnit.Inch">
            <summary>
            Inch.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffResolutionUnit.Centimeter">
            <summary>
            Centimeter.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffSubfileType">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffSubfileType.FullResolutionImageData">
            <summary>
            full-resolution image data
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffSubfileType.ReducedResolutionImageData">
            <summary>
            reduced-resolution image data
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffSubfileType.SinglePage">
            <summary>
            a single page of a multi-page image (see the PageNumber field description).
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffT4Options">
            <summary>
            Options for T4 encoding.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT4Options.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT4Options.Is2DimensionalCoding">
            <summary>
            Bit 0 is 1 for 2-dimensional coding (otherwise 1-dimensional is assumed). For 2-D coding, if more than one strip is specified, each strip must begin with a 1-dimensionally coded line. That is, RowsPerStrip should be a multiple of “Parameter K,” as documented in the CCITT specification.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT4Options.UseUncompressedMode">
            <summary>
            Bit 1 is 1 if uncompressed mode is used.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT4Options.FillBitsBeforeEOLCodes">
            <summary>
            Bit 2 is 1 if fill bits have been added as necessary before EOL codes such that EOL always ends on a byte boundary, thus ensuring an EOL-sequence of 1 byte preceded by a zero nibble:  xxxx-0000 0000-0001.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffT6Options">
            <summary>
            Options for T6 encoding.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT6Options.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffT6Options.AllowUncompressedMode">
            <summary>
            Bit 1 is 1 if uncompressed mode is allowed in the encoding
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffTag">
            <summary>
            The tiff tag.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.NewSubfileType">
            <summary>
            NewSubfileType.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SubFileType">
            <summary>
            SubFileType.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ImageWidth">
            <summary>
            ImageWidth.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ImageLength">
            <summary>
            ImageLength.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.BitsPerSample">
            <summary>
            BitsPerSample.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Compression">
            <summary>
            Compression.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.PhotometricInterpretation">
            <summary>
            PhotometricInterpretation.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Threshholding">
            <summary>
            Threshholding.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.CellWidth">
            <summary>
            CellWidth.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.CellLength">
            <summary>
            CellLength.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.FillOrder">
            <summary>
            FillOrder.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.DocumentName">
            <summary>
            DocumentName.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ImageDescription">
            <summary>
            ImageDescription.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Make">
            <summary>
            Make.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.StripOffsets">
            <summary>
            StripOffsets.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Orientation">
            <summary>
            Orientation.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SamplesPerPixel">
            <summary>
            SamplesPerPixel.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.RowsPerStrip">
            <summary>
            RowsPerStrip.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.StripByteCounts">
            <summary>
            StripByteCounts.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.MinSampleValue">
            <summary>
            MinSampleValue.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.MaxSampleValue">
            <summary>
            MaxSampleValue.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.XResolution">
            <summary>
            XResolution.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YResolution">
            <summary>
            YResolution.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.PlanarConfiguration">
            <summary>
            PlanarConfiguration.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.PageName">
            <summary>
            PageName.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.XPosition">
            <summary>
            XPosition.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YPosition">
            <summary>
            YPosition.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.FreeOffsets">
            <summary>
            FreeOffsets.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.FreeByteCounts">
            <summary>
            FreeByteCounts.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.GrayResponseUnit">
            <summary>
            GrayResponseUnit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.GrayResponseCurve">
            <summary>
            GrayResponseCurve.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.T4Options">
            <summary>
            T4Options.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.T6Options">
            <summary>
            T6Options.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ResolutionUnit">
            <summary>
            ResolutionUnit.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.PageNumber">
            <summary>
            PageNumber.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TransferFunction">
            <summary>
            TransferFunction.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Software">
            <summary>
            Software.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.DateTime">
            <summary>
            DateTime.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Artist">
            <summary>
            Artist.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.HostComputer">
            <summary>
            HostComputer.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Predictor">
            <summary>
            Predictor.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.WhitePoint">
            <summary>
            WhitePoint.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.PrimaryChromaticities">
            <summary>
            PrimaryChromaticities.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ColorMap">
            <summary>
            ColorMap.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.HalftoneHints">
            <summary>
            HalftoneHints.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TileWidth">
            <summary>
            TileWidth.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TileLength">
            <summary>
            TileLength.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TileOffsets">
            <summary>
            TileOffsets.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TileByteCounts">
            <summary>
            TileByteCounts.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.BadFaxLines">
            <summary>
            The BadFaxLines tag reports the number of scan lines with an incorrect number of pixels encountered by the facsimile during reception (but not necessarily in the file).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.CleanFaxData">
            <summary>
            The CleanFaxData tag describes the error content of the data. That is, when the BadFaxLines and ImageLength tags indicate that the facsimile device encountered lines with an incorrect number of pixels during reception, the CleanFaxData tag indicates whether these lines are actually in the data or if the receiving facsimile device replaced them with regenerated lines.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ConsecutiveBadFaxLines">
            <summary>
            The ConsecutiveBadFaxLines tag reports the maximum number of consecutive lines containing an incorrect number of pixels encountered by the facsimile device during reception (but not necessarily in the file).
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SubIFDs">
            <summary>
            SubIFDs
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.InkSet">
            <summary>
            InkSet.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.InkNames">
            <summary>
            InkNames.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.NumberOfInks">
            <summary>
            NumberOfInks.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.DotRange">
            <summary>
            DotRange.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TargetPrinter">
            <summary>
            TargetPrinter.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ExtraSamples">
            <summary>
            ExtraSamples.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SampleFormat">
            <summary>
            SampleFormat.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SMinSampleValue">
            <summary>
            SMinSampleValue.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.SMaxSampleValue">
            <summary>
            SMaxSampleValue.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.TransferRange">
            <summary>
            TransferRange.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ClipPath">
            <summary>
            ClipPath
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.XClipPathUnits">
            <summary>
            XClipPathUnits
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YClipPathUnits">
            <summary>
            XClipPathUnits
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Indexed">
            <summary>
            Indexed
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGProc">
            <summary>
            JPEGProc.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGInterchangeFormat">
            <summary>
            JPEGInterchangeFormat.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGInterchangeFormatLength">
            <summary>
            JPEGInterchangeFormatLength.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGRestartInterval">
            <summary>
            JPEGRestartInterval.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGLosslessPredictors">
            <summary>
            JPEGLosslessPredictors.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGPointTransforms">
            <summary>
            JPEGPointTransforms.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGQTables">
            <summary>
            JPEGQTables.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGDCTables">
            <summary>
            JPEGDCTables.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGACTables">
            <summary>
            JPEGACTables.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YCbCrCoefficients">
            <summary>
            YCbCrCoefficients.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YCbCrSubSampling">
            <summary>
            YCbCrSubSampling.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.YCbCrPositioning">
            <summary>
            YCbCrPositioning.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ReferenceBlackWhite">
            <summary>
            ReferenceBlackWhite.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Copyright">
            <summary>
            Copyright.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.JPEGTables">
            <summary>
            JPEGTables
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.Photoshop">
            <summary>
            Photoshop
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.ExifIfd">
            <summary>
            ExifIfd
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.GpsIfd">
            <summary>
            GpsIfd
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffTag.InteroperabilityIfd">
            <summary>
            InteroperabilityIfd
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffThreshholding">
            <summary>
            For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffThreshholding.NoThreshholding">
            <summary>
            No dithering or halftoning has been applied to the image data.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffThreshholding.Ordered">
            <summary>
            An ordered dither or halftone technique has been applied to the image data.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffThreshholding.Randomized">
            <summary>
            A randomized process such as error diffusion has been applied to the image data.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffYCbCrPositioning">
            <summary>
            Positioning of chrominance component samples relative to the luminance samples
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffYCbCrPositioning.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffYCbCrPositioning.Centered">
            <summary>
            Centered.
            </summary>
        </member>
        <member name="F:TiffLibrary.TiffYCbCrPositioning.Cosited">
            <summary>
            Cosited.
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifContrast">
            <summary>
            Indicates the direction of contrast processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifContrast.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifContrast.Soft">
            <summary>
            Soft
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifContrast.Hard">
            <summary>
            Hard
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifCustomRendered">
            <summary>
            Indicates the use of special processing on image data, such as rendering geared to output.
            When special processing is performed, the reader is expected to disable or minimize any further processing.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifCustomRendered.NormalProcess">
            <summary>
            Normal process
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifCustomRendered.CustomProcess">
            <summary>
            Custom process
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifExposureMode">
            <summary>
            Indicates the exposure mode set when the image was shot.
            In auto-bracketing mode, the camera shoots a series of frames of the same scene at different exposure settings.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureMode.AutoExposure">
            <summary>
            Auto exposure
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureMode.ManualExposure">
            <summary>
            Manual exposure
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureMode.AutoBracket">
            <summary>
            Auto bracket
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifExposureProgram">
            <summary>
            The class of the program used by the camera to set exposure when the picture is taken.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.NotDefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.Manual">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.NormalProgram">
            <summary>
            Normal program
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.AperturePriority">
            <summary>
            Aperture priority
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.ShutterPriority">
            <summary>
            Shutter priority
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.CreativeProgram">
            <summary>
            Creative program (biased toward depth of field)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.ActionProgram">
            <summary>
            Action program (biased toward fast shutter speed)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.PortraitMode">
            <summary>
            Portrait mode (for closeup photos with the background out of focus)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifExposureProgram.LandscapeMode">
            <summary>
            Landscape mode (for landscape photos with the background in focus)
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifFlash">
            <summary>
            Indicates the status of flash when the image was shot.
            </summary>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.Value">
            <summary>
            The value of the Flash tag.
            </summary>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.#ctor(System.UInt16)">
            <summary>
            Initialize with the specified Flash tag value.
            </summary>
            <param name="value">The Flash tag value.</param>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.FlashFired">
            <summary>
            Values for bit 0 indicating whether the flash fired.
            </summary>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.StatusOfReturnedLight">
            <summary>
            Values for bits 1 and 2 indicating the status of returned light.
            00 = No strobe return detection function
            01 = reserved
            10 = Strobe return light not detected
            11 = Strobe return light detected
            </summary>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.FlashMode">
            <summary>
            Values for bits 3 and 4 indicating the camera's flash mode.
            00 = unknown
            01 = Compulsory flash firing
            10 = Compulsory flash suppression
            11 = Auto mode
            </summary>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.FlashFunctionPresent">
            <summary>
            Values for bit 5 indicating the presence of a flash function.
            </summary>
        </member>
        <member name="P:TiffLibrary.Exif.TiffExifFlash.RedEyeReductionSupported">
            <summary>
            Values for bit 6 indicating the camera's red-eye mode.
            </summary>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.op_Implicit(TiffLibrary.Exif.TiffExifFlash)~System.UInt16">
            <summary>
            Gets the underlying value。
            </summary>
            <param name="flash"></param>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.ToUInt16">
            <summary>
            Gets the underlying value。
            </summary>
            <returns>The value of the Flash tag.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.Equals(TiffLibrary.Exif.TiffExifFlash)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.op_Equality(TiffLibrary.Exif.TiffExifFlash,TiffLibrary.Exif.TiffExifFlash)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.op_Inequality(TiffLibrary.Exif.TiffExifFlash,TiffLibrary.Exif.TiffExifFlash)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.Exif.TiffExifFlash.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifGainControl">
            <summary>
            Indicates the degree of overall image gain adjustment.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifGainControl.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifGainControl.LowGainUp">
            <summary>
            Low gain up
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifGainControl.HighGainUp">
            <summary>
            High gain up
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifGainControl.LowGainDown">
            <summary>
            Low gain down
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifGainControl.HighGainDown">
            <summary>
            High gain down
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifLightSource">
            <summary>
            The kind of light source.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Daylight">
            <summary>
            Daylight
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Fluorescent">
            <summary>
            Fluorescent
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Tungsten">
            <summary>
            Tungsten (incandescent light)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.FineWeather">
            <summary>
            Fine weather
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.CloudyWeather">
            <summary>
            Cloudy weather
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Shade">
            <summary>
            Shade
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.DaylightFluorescent">
            <summary>
            Daylight fluorescent (D 5700 - 7100K)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.DayWhiteFluorescent">
            <summary>
            Day white fluorescent (N 4600 - 5400K)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.CoolWhiteFluorescent">
            <summary>
            Cool white fluorescent (W 3900 - 4500K)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.WhiteFluorescent">
            <summary>
            White fluorescent (WW 3200 - 3700K)
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.StandardLightA">
            <summary>
            Standard light A
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.StandardLightB">
            <summary>
            Standard light B
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.StandardLightC">
            <summary>
            Standard light C
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.D55">
            <summary>
            D55
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.D65">
            <summary>
            D65
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.D75">
            <summary>
            D75
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.D50">
            <summary>
            D50
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.ISOStudioTungsten">
            <summary>
            ISO studio tungsten
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifLightSource.Other">
            <summary>
            Other light source
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifMeteringMode">
            <summary>
            The metering mode.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.CenterWeightedAverage">
            <summary>
            CenterWeightedAverage
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.MultiSpot">
            <summary>
            MultiSpot
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Partial">
            <summary>
            Partial
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifMeteringMode.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifSaturation">
            <summary>
            Indicates the direction of saturation processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSaturation.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSaturation.Low">
            <summary>
            Low saturation
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSaturation.High">
            <summary>
            High saturation
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifSceneCaptureType">
            <summary>
            Indicates the type of scene that was shot.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSceneCaptureType.Standard">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSceneCaptureType.Landscape">
            <summary>
            Landscape
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSceneCaptureType.Portrait">
            <summary>
            Portrait
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSceneCaptureType.NightScene">
            <summary>
            NightScene
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifSensingMethod">
            <summary>
            Indicates the image sensor type on the camera or input device.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.NotDefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.OneChipColorAreaSensor">
            <summary>
            One-chip color area sensor
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.TwoChipColorAreaSensor">
            <summary>
            Two-chip color area sensor
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.ThreeChipColorAreaSensor">
            <summary>
            Three-chip color area sensor
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.ColorSequentialAreaSensor">
            <summary>
            Color sequential area sensor
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.TrilinearSensor">
            <summary>
            Trilinear sensor
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSensingMethod.ColorSequentialLinearSensor">
            <summary>
            Color sequential linear sensor
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifSharpness">
            <summary>
            Indicates the direction of sharpness processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSharpness.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSharpness.Soft">
            <summary>
            Soft
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSharpness.Hard">
            <summary>
            Hard
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifSubjectDistanceRange">
            <summary>
            Indicates the distance to the subject.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSubjectDistanceRange.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSubjectDistanceRange.Macro">
            <summary>
            Macro
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSubjectDistanceRange.CloseView">
            <summary>
            CloseView
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifSubjectDistanceRange.DistantView">
            <summary>
            DistantView
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffExifWhiteBalance">
            <summary>
            Indicates the white balance mode set when the image was shot.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifWhiteBalance.Auto">
            <summary>
            Auto white balance
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffExifWhiteBalance.Manual">
            <summary>
            Manual white balance
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffGpsAltitudeReference">
            <summary>
            Indicates the altitude used as the reference altitude.
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffGpsAltitudeReference.AboveSeaLevel">
            <summary>
            Above sea level
            </summary>
        </member>
        <member name="F:TiffLibrary.Exif.TiffGpsAltitudeReference.BelowSeaLevel">
            <summary>
            Below sea level
            </summary>
        </member>
        <member name="T:TiffLibrary.Exif.TiffTagExifReaderExtensions">
            <summary>
            Extension methods to read tag values from Exif Sub-IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureTimeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExposureTime tag.
            Field description: Exposure time, given in seconds.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureTime(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExposureTime tag.
            Field description: Exposure time, given in seconds.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFNumberAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FNumber tag.
            Field description: The F number.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFNumber(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FNumber tag.
            Field description: The F number.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureProgramAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExposureProgram tag.
            Field description: The class of the program used by the camera to set exposure when the picture is taken.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureProgram(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExposureProgram tag.
            Field description: The class of the program used by the camera to set exposure when the picture is taken.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSpectralSensitivityAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SpectralSensitivity tag.
            Field description: Indicates the spectral sensitivity of each channel of the camera used. The tag value is an ASCII string compatible with the standard developed by the ASTM Technical committee.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSpectralSensitivity(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SpectralSensitivity tag.
            Field description: Indicates the spectral sensitivity of each channel of the camera used. The tag value is an ASCII string compatible with the standard developed by the ASTM Technical committee.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifISOSpeedRatingsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ISOSpeedRatings tag.
            Field description: Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifISOSpeedRatings(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ISOSpeedRatings tag.
            Field description: Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifOECFAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of OECF tag.
            Field description: Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifOECF(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of OECF tag.
            Field description: Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifVersionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExifVersion tag.
            Field description: The version of the supported Exif standard.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifVersion(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExifVersion tag.
            Field description: The version of the supported Exif standard.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDateTimeOriginalAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of DateTimeOriginal tag.
            Field description: The date and time when the original image data was generated. For a digital still camera, this is the date and time the picture was taken or recorded. The format is "YYYY:MM:DD HH:MM:SS" with time shown in 24-hour format, and the date and time separated by one blank character (hex 20).
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDateTimeOriginal(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of DateTimeOriginal tag.
            Field description: The date and time when the original image data was generated. For a digital still camera, this is the date and time the picture was taken or recorded. The format is "YYYY:MM:DD HH:MM:SS" with time shown in 24-hour format, and the date and time separated by one blank character (hex 20).
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDateTimeDigitizedAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of DateTimeDigitized tag.
            Field description: The date and time when the image was stored as digital data. If, for example, an image was captured by a digital still camera, and at the same time the file was recorded, then the DateTimeOriginal and DateTimeDigitized will have the same contents. The format is "YYYY:MM:DD HH:MM:SS" with time shown in 24-hour format, and the date and time separated by one blank character (hex 20).
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDateTimeDigitized(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of DateTimeDigitized tag.
            Field description: The date and time when the image was stored as digital data. If, for example, an image was captured by a digital still camera, and at the same time the file was recorded, then the DateTimeOriginal and DateTimeDigitized will have the same contents. The format is "YYYY:MM:DD HH:MM:SS" with time shown in 24-hour format, and the date and time separated by one blank character (hex 20).
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifComponentsConfigurationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ComponentsConfiguration tag.
            Field description: Specific to compressed data; specifies the channels and complements PhotometricInterpretation.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifComponentsConfiguration(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ComponentsConfiguration tag.
            Field description: Specific to compressed data; specifies the channels and complements PhotometricInterpretation.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCompressedBitsPerPixelAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of CompressedBitsPerPixel tag.
            Field description: Specific to compressed data; states the compressed bits per pixel. The compression mode used for a compressed image is indicated in unit bits per pixel.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCompressedBitsPerPixel(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of CompressedBitsPerPixel tag.
            Field description: Specific to compressed data; states the compressed bits per pixel. The compression mode used for a compressed image is indicated in unit bits per pixel.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifShutterSpeedValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ShutterSpeedValue tag.
            Field description: Shutter speed. The unit is the APEX (Additive System of Photographic Exposure) setting.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifShutterSpeedValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ShutterSpeedValue tag.
            Field description: Shutter speed. The unit is the APEX (Additive System of Photographic Exposure) setting.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifApertureValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ApertureValue tag.
            Field description: The lens aperture. The unit is the APEX (Additive System of Photographic Exposure) setting.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifApertureValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ApertureValue tag.
            Field description: The lens aperture. The unit is the APEX (Additive System of Photographic Exposure) setting.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifBrightnessValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of BrightnessValue tag.
            Field description: The value of brightness. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of -99.99 to 99.99. Note that if the numerator of the recorded value is hex FFFFFFFF, Unknown shall be indicated.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifBrightnessValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of BrightnessValue tag.
            Field description: The value of brightness. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of -99.99 to 99.99. Note that if the numerator of the recorded value is hex FFFFFFFF, Unknown shall be indicated.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureBiasValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExposureBiasValue tag.
            Field description: The exposure bias. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of -99.99 to 99.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureBiasValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExposureBiasValue tag.
            Field description: The exposure bias. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of -99.99 to 99.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMaxApertureValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of MaxApertureValue tag.
            Field description: The smallest F number of the lens. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of 00.00 to 99.99, but it is not limited to this range.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMaxApertureValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of MaxApertureValue tag.
            Field description: The smallest F number of the lens. The unit is the APEX (Additive System of Photographic Exposure) setting. Ordinarily it is given in the range of 00.00 to 99.99, but it is not limited to this range.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectDistanceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubjectDistance tag.
            Field description: The distance to the subject, given in meters. Note that if the numerator of the recorded value is hex FFFFFFFF, Infinity shall be indicated; and if the numerator is 0, Distance unknown shall be indicated.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectDistance(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubjectDistance tag.
            Field description: The distance to the subject, given in meters. Note that if the numerator of the recorded value is hex FFFFFFFF, Infinity shall be indicated; and if the numerator is 0, Distance unknown shall be indicated.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMeteringModeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of MeteringMode tag.
            Field description: The metering mode.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMeteringMode(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of MeteringMode tag.
            Field description: The metering mode.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifLightSourceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of LightSource tag.
            Field description: The kind of light source.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifLightSource(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of LightSource tag.
            Field description: The kind of light source.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlashAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of Flash tag.
            Field description: Indicates the status of flash when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlash(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of Flash tag.
            Field description: Indicates the status of flash when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalLengthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FocalLength tag.
            Field description: The actual focal length of the lens, in mm.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalLength(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FocalLength tag.
            Field description: The actual focal length of the lens, in mm.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectAreaAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubjectArea tag.
            Field description: Indicates the location and area of the main subject in the overall scene.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectArea(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubjectArea tag.
            Field description: Indicates the location and area of the main subject in the overall scene.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMakerNoteAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of MakerNote tag.
            Field description: Manufacturer specific information.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifMakerNote(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of MakerNote tag.
            Field description: Manufacturer specific information.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifUserCommentAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of UserComment tag.
            Field description: Keywords or comments on the image; complements ImageDescription. The character code used in the UserComment tag is identified based on an ID code in a fixed 8-byte area at the start of the tag data area.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifUserComment(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of UserComment tag.
            Field description: Keywords or comments on the image; complements ImageDescription. The character code used in the UserComment tag is identified based on an ID code in a fixed 8-byte area at the start of the tag data area.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTimeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubsecTime tag.
            Field description: A tag used to record fractions of seconds for the DateTime tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTime(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubsecTime tag.
            Field description: A tag used to record fractions of seconds for the DateTime tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTimeOriginalAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubsecTimeOriginal tag.
            Field description: A tag used to record fractions of seconds for the DateTimeOriginal tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTimeOriginal(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubsecTimeOriginal tag.
            Field description: A tag used to record fractions of seconds for the DateTimeOriginal tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTimeDigitizedAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubsecTimeDigitized tag.
            Field description: A tag used to record fractions of seconds for the DateTimeDigitized tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubsecTimeDigitized(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubsecTimeDigitized tag.
            Field description: A tag used to record fractions of seconds for the DateTimeDigitized tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlashpixVersionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FlashpixVersion tag.
            Field description: The Flashpix format version supported by a FPXR file.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlashpixVersion(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FlashpixVersion tag.
            Field description: The Flashpix format version supported by a FPXR file.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifColorSpaceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ColorSpace tag.
            Field description: The color space information tag is always recorded as the color space specifier.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifColorSpace(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ColorSpace tag.
            Field description: The color space information tag is always recorded as the color space specifier.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifPixelXDimensionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of PixelXDimension tag.
            Field description: Specific to compressed data; the valid width of the meaningful image.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifPixelXDimension(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of PixelXDimension tag.
            Field description: Specific to compressed data; the valid width of the meaningful image.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifPixelYDimensionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of PixelYDimension tag.
            Field description: Specific to compressed data; the valid height of the meaningful image.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifPixelYDimension(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of PixelYDimension tag.
            Field description: Specific to compressed data; the valid height of the meaningful image.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifRelatedSoundFileAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of RelatedSoundFile tag.
            Field description: Used to record the name of an audio file related to the image data.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifRelatedSoundFile(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of RelatedSoundFile tag.
            Field description: Used to record the name of an audio file related to the image data.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlashEnergyAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FlashEnergy tag.
            Field description: Indicates the strobe energy at the time the image is captured, as measured in Beam Candle Power Seconds.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFlashEnergy(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FlashEnergy tag.
            Field description: Indicates the strobe energy at the time the image is captured, as measured in Beam Candle Power Seconds.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSpatialFrequencyResponseAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SpatialFrequencyResponse tag.
            Field description: Records the camera or input device spatial frequency table and SFR values in the direction of image width, image height, and diagonal direction, as specified in ISO 12233.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSpatialFrequencyResponse(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SpatialFrequencyResponse tag.
            Field description: Records the camera or input device spatial frequency table and SFR values in the direction of image width, image height, and diagonal direction, as specified in ISO 12233.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneXResolutionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FocalPlaneXResolution tag.
            Field description: Indicates the number of pixels in the image width (X) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneXResolution(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FocalPlaneXResolution tag.
            Field description: Indicates the number of pixels in the image width (X) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneYResolutionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FocalPlaneYResolution tag.
            Field description: Indicates the number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneYResolution(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FocalPlaneYResolution tag.
            Field description: Indicates the number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneResolutionUnitAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FocalPlaneResolutionUnit tag.
            Field description: Indicates the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalPlaneResolutionUnit(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FocalPlaneResolutionUnit tag.
            Field description: Indicates the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectLocationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubjectLocation tag.
            Field description: Indicates the location of the main subject in the scene.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectLocation(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubjectLocation tag.
            Field description: Indicates the location of the main subject in the scene.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureIndexAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExposureIndex tag.
            Field description: Indicates the exposure index selected on the camera or input device at the time the image is captured.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureIndex(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExposureIndex tag.
            Field description: Indicates the exposure index selected on the camera or input device at the time the image is captured.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSensingMethodAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SensingMethod tag.
            Field description: Indicates the image sensor type on the camera or input device.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSensingMethod(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SensingMethod tag.
            Field description: Indicates the image sensor type on the camera or input device.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFileSourceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FileSource tag.
            Field description: Indicates the image source. If a DSC (Digital Still Camera) recorded the image, this tag will always be set to 3, indicating that the image was recorded on a DSC.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFileSource(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FileSource tag.
            Field description: Indicates the image source. If a DSC (Digital Still Camera) recorded the image, this tag will always be set to 3, indicating that the image was recorded on a DSC.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSceneTypeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SceneType tag.
            Field description: Indicates the type of scene. If a DSC recorded the image, this tag value shall always be set to 1, indicating that the image was directly photographed.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSceneType(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SceneType tag.
            Field description: Indicates the type of scene. If a DSC recorded the image, this tag value shall always be set to 1, indicating that the image was directly photographed.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCFAPatternAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of CFAPattern tag.
            Field description: Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCFAPattern(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of CFAPattern tag.
            Field description: Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCustomRenderedAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of CustomRendered tag.
            Field description: Indicates the use of special processing on image data, such as rendering geared to output.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifCustomRendered(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of CustomRendered tag.
            Field description: Indicates the use of special processing on image data, such as rendering geared to output.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureModeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ExposureMode tag.
            Field description: Indicates the exposure mode set when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifExposureMode(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ExposureMode tag.
            Field description: Indicates the exposure mode set when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifWhiteBalanceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of WhiteBalance tag.
            Field description: Indicates the white balance mode set when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifWhiteBalance(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of WhiteBalance tag.
            Field description: Indicates the white balance mode set when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDigitalZoomRatioAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of DigitalZoomRatio tag.
            Field description: Indicates the digital zoom ratio when the image was shot. If the numerator of the recorded value is 0, this indicates that digital zoom was not used.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDigitalZoomRatio(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of DigitalZoomRatio tag.
            Field description: Indicates the digital zoom ratio when the image was shot. If the numerator of the recorded value is 0, this indicates that digital zoom was not used.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalLengthIn35mmFilmAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of FocalLengthIn35mmFilm tag.
            Field description: Indicates the equivalent focal length assuming a 35mm film camera, in mm. A value of 0 means the focal length is unknown. Note that this tag differs from the FocalLength tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifFocalLengthIn35mmFilm(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of FocalLengthIn35mmFilm tag.
            Field description: Indicates the equivalent focal length assuming a 35mm film camera, in mm. A value of 0 means the focal length is unknown. Note that this tag differs from the FocalLength tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSceneCaptureTypeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SceneCaptureType tag.
            Field description: Indicates the type of scene that was shot. It can also be used to record the mode in which the image was shot. Note that this differs from the SceneType tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSceneCaptureType(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SceneCaptureType tag.
            Field description: Indicates the type of scene that was shot. It can also be used to record the mode in which the image was shot. Note that this differs from the SceneType tag.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifGainControlAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GainControl tag.
            Field description: Indicates the degree of overall image gain adjustment.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifGainControl(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GainControl tag.
            Field description: Indicates the degree of overall image gain adjustment.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifContrastAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of Contrast tag.
            Field description: Indicates the direction of contrast processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifContrast(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of Contrast tag.
            Field description: Indicates the direction of contrast processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSaturationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of Saturation tag.
            Field description: Indicates the direction of saturation processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSaturation(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of Saturation tag.
            Field description: Indicates the direction of saturation processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSharpnessAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of Sharpness tag.
            Field description: Indicates the direction of sharpness processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSharpness(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of Sharpness tag.
            Field description: Indicates the direction of sharpness processing applied by the camera when the image was shot.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDeviceSettingDescriptionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of DeviceSettingDescription tag.
            Field description: This tag indicates information on the picture-taking conditions of a particular camera model. The tag is used only to indicate the picture-taking conditions in the reader.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifDeviceSettingDescription(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of DeviceSettingDescription tag.
            Field description: This tag indicates information on the picture-taking conditions of a particular camera model. The tag is used only to indicate the picture-taking conditions in the reader.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectDistanceRangeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of SubjectDistanceRange tag.
            Field description: Indicates the distance to the subject.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifSubjectDistanceRange(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of SubjectDistanceRange tag.
            Field description: Indicates the distance to the subject.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifImageUniqueIDAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of ImageUniqueID tag.
            Field description: Indicates an identifier assigned uniquely to each image. It is recorded as an ASCII string equivalent to hexadecimal notation and 128-bit fixed length.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadExifImageUniqueID(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of ImageUniqueID tag.
            Field description: Indicates an identifier assigned uniquely to each image. It is recorded as an ASCII string equivalent to hexadecimal notation and 128-bit fixed length.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsVersionIDAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSVersionID tag.
            Field description: Indicates the version of GPSInfoIFD.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsVersionID(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSVersionID tag.
            Field description: Indicates the version of GPSInfoIFD.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLatitudeReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSLatitudeReference tag.
            Field description: Indicates whether the latitude is north or south latitude. The ASCII value 'N' indicates north latitude, and 'S' is south latitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLatitudeReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSLatitudeReference tag.
            Field description: Indicates whether the latitude is north or south latitude. The ASCII value 'N' indicates north latitude, and 'S' is south latitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLatitudeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSLatitude tag.
            Field description: Indicates the latitude. The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If latitude is expressed as degrees, minutes and seconds, a typical format would be dd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be dd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLatitude(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSLatitude tag.
            Field description: Indicates the latitude. The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If latitude is expressed as degrees, minutes and seconds, a typical format would be dd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be dd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLongitudeReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSLongitudeReference tag.
            Field description: Indicates whether the longitude is east or west longitude. ASCII 'E' indicates east longitude, and 'W' is west longitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLongitudeReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSLongitudeReference tag.
            Field description: Indicates whether the longitude is east or west longitude. ASCII 'E' indicates east longitude, and 'W' is west longitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLongitudeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSLongitude tag.
            Field description: Indicates the longitude. The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If longitude is expressed as degrees, minutes and seconds, a typical format would be ddd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be ddd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsLongitude(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSLongitude tag.
            Field description: Indicates the longitude. The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If longitude is expressed as degrees, minutes and seconds, a typical format would be ddd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be ddd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAltitudeReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSAltitudeReference tag.
            Field description: Indicates the altitude used as the reference altitude. If the reference is sea level and the altitude is above sea level, 0 is given. If the altitude is below sea level, a value of 1 is given and the altitude is indicated as an absolute value in the GPSAltitude tag. The reference unit is meters. Note that this tag is BYTE type, unlike other reference tags.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAltitudeReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSAltitudeReference tag.
            Field description: Indicates the altitude used as the reference altitude. If the reference is sea level and the altitude is above sea level, 0 is given. If the altitude is below sea level, a value of 1 is given and the altitude is indicated as an absolute value in the GPSAltitude tag. The reference unit is meters. Note that this tag is BYTE type, unlike other reference tags.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAltitudeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSAltitude tag.
            Field description: Indicates the altitude based on the reference in GPSAltitudeRef. Altitude is expressed as one RATIONAL value. The reference unit is meters.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAltitude(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSAltitude tag.
            Field description: Indicates the altitude based on the reference in GPSAltitudeRef. Altitude is expressed as one RATIONAL value. The reference unit is meters.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTimeStampAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSTimeStamp tag.
            Field description: Indicates the time as UTC (Coordinated Universal Time). TimeStamp is expressed as three RATIONAL values giving the hour, minute, and second.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTimeStamp(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSTimeStamp tag.
            Field description: Indicates the time as UTC (Coordinated Universal Time). TimeStamp is expressed as three RATIONAL values giving the hour, minute, and second.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSatellitesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSSatellites tag.
            Field description: Indicates the GPS satellites used for measurements. This tag can be used to describe the number of satellites, their ID number, angle of elevation, azimuth, SNR and other information in ASCII notation. The format is not specified. If the GPS receiver is incapable of taking measurements, value of the tag shall be set to NULL.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSatellites(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSSatellites tag.
            Field description: Indicates the GPS satellites used for measurements. This tag can be used to describe the number of satellites, their ID number, angle of elevation, azimuth, SNR and other information in ASCII notation. The format is not specified. If the GPS receiver is incapable of taking measurements, value of the tag shall be set to NULL.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsStatusAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSStatus tag.
            Field description: Indicates the status of the GPS receiver when the image is recorded. 'A' = Measurement is in progress. 'V' = Measurement is Interoperability.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsStatus(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSStatus tag.
            Field description: Indicates the status of the GPS receiver when the image is recorded. 'A' = Measurement is in progress. 'V' = Measurement is Interoperability.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsMeasureModeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSMeasureMode tag.
            Field description: Indicates the GPS measurement mode. '2' = 2-dimensional measurement. '3' = 3-dimensional measurement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsMeasureMode(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSMeasureMode tag.
            Field description: Indicates the GPS measurement mode. '2' = 2-dimensional measurement. '3' = 3-dimensional measurement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDilutionOfPrecisionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDilutionOfPrecision tag.
            Field description: Indicates the GPS DOP (data degree of precision). An HDOP value is written during two-dimensional measurement, and PDOP during three-dimensional measurement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDilutionOfPrecision(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDilutionOfPrecision tag.
            Field description: Indicates the GPS DOP (data degree of precision). An HDOP value is written during two-dimensional measurement, and PDOP during three-dimensional measurement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSpeedReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSSpeedReference tag.
            Field description: Indicates the unit used to express the GPS receiver speed of movement. 'K' = Kilometers per hour. 'M' = Miles per hour. 'N' = Knots.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSpeedReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSSpeedReference tag.
            Field description: Indicates the unit used to express the GPS receiver speed of movement. 'K' = Kilometers per hour. 'M' = Miles per hour. 'N' = Knots.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSpeedAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSSpeed tag.
            Field description: Indicates the speed of GPS receiver movement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsSpeed(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSSpeed tag.
            Field description: Indicates the speed of GPS receiver movement.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTrackReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSTrackReference tag.
            Field description: Indicates the reference for giving the direction of GPS receiver movement. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTrackReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSTrackReference tag.
            Field description: Indicates the reference for giving the direction of GPS receiver movement. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTrackAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSTrack tag.
            Field description: Indicates the direction of GPS receiver movement. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsTrack(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSTrack tag.
            Field description: Indicates the direction of GPS receiver movement. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsImageDirectionReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSImageDirectionReference tag.
            Field description: Indicates the reference for giving the direction of the image when it is captured. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsImageDirectionReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSImageDirectionReference tag.
            Field description: Indicates the reference for giving the direction of the image when it is captured. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsImageDirectionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSImageDirection tag.
            Field description: Indicates the direction of the image when it was captured. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsImageDirection(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSImageDirection tag.
            Field description: Indicates the direction of the image when it was captured. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsMapDatumAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSMapDatum tag.
            Field description: Indicates the geodetic survey data used by the GPS receiver. If the survey data is restricted to Japan, the value of this tag is 'TOKYO' or 'WGS-84'. If a GPS Info tag is recorded, it is strongly recommended that this tag be recorded.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsMapDatum(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSMapDatum tag.
            Field description: Indicates the geodetic survey data used by the GPS receiver. If the survey data is restricted to Japan, the value of this tag is 'TOKYO' or 'WGS-84'. If a GPS Info tag is recorded, it is strongly recommended that this tag be recorded.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLatitudeReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationLatitudeReference tag.
            Field description: Indicates whether the latitude of the destination point is north or south latitude. 'N' = North latitude. 'S' = South latitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLatitudeReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationLatitudeReference tag.
            Field description: Indicates whether the latitude of the destination point is north or south latitude. 'N' = North latitude. 'S' = South latitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLatitudeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationLatitude tag.
            Field description: Indicates the latitude of the destination point. The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If latitude is expressed as degrees, minutes and seconds, a typical format would be dd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be dd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLatitude(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationLatitude tag.
            Field description: Indicates the latitude of the destination point. The latitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If latitude is expressed as degrees, minutes and seconds, a typical format would be dd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be dd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLongitudeReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationLongitudeReference tag.
            Field description: Indicates whether the longitude of the destination point is east or west longitude. 'E' = East longitude. 'W' = West longitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLongitudeReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationLongitudeReference tag.
            Field description: Indicates whether the longitude of the destination point is east or west longitude. 'E' = East longitude. 'W' = West longitude.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLongitudeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationLongitude tag.
            Field description: Indicates the longitude of the destination point. The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If longitude is expressed as degrees, minutes and seconds, a typical format would be ddd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be ddd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationLongitude(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationLongitude tag.
            Field description: Indicates the longitude of the destination point. The longitude is expressed as three RATIONAL values giving the degrees, minutes, and seconds, respectively. If longitude is expressed as degrees, minutes and seconds, a typical format would be ddd/1,mm/1,ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format would be ddd/1,mmmm/100,0/1.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationBearingReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationBearingReference tag.
            Field description: Indicates the reference used for giving the bearing to the destination point. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationBearingReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationBearingReference tag.
            Field description: Indicates the reference used for giving the bearing to the destination point. 'T' = True direction. 'M' = Magnetic direction.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationBearingAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationBearing tag.
            Field description: Indicates the bearing to the destination point. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationBearing(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationBearing tag.
            Field description: Indicates the bearing to the destination point. The range of values is from 0.00 to 359.99.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationDistanceReferenceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationDistanceReference tag.
            Field description: Indicates the unit used to express the distance to the destination point. 'K' = Kilometers. 'M' = Miles. 'N' = Knots.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationDistanceReference(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationDistanceReference tag.
            Field description: Indicates the unit used to express the distance to the destination point. 'K' = Kilometers. 'M' = Miles. 'N' = Knots.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationDistanceAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDestinationDistance tag.
            Field description: Indicates the distance to the destination point.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDestinationDistance(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDestinationDistance tag.
            Field description: Indicates the distance to the destination point.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsProcessingMethodAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSProcessingMethod tag.
            Field description: A character string recording the name of the method used for location finding. The first byte indicates the character code used, and this is followed by the name of the method. Since the Type is not ASCII, NULL termination is not necessary.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsProcessingMethod(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSProcessingMethod tag.
            Field description: A character string recording the name of the method used for location finding. The first byte indicates the character code used, and this is followed by the name of the method. Since the Type is not ASCII, NULL termination is not necessary.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAreaInformationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSAreaInformation tag.
            Field description: A character string recording the name of the GPS area. The first byte indicates the character code used, and this is followed by the name of the GPS area. Since the Type is not ASCII, NULL termination is not necessary.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsAreaInformation(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSAreaInformation tag.
            Field description: A character string recording the name of the GPS area. The first byte indicates the character code used, and this is followed by the name of the GPS area. Since the Type is not ASCII, NULL termination is not necessary.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDateStampAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDateStamp tag.
            Field description: A character string recording date and time information relative to UTC (Coordinated Universal Time). The format is "YYYY:MM:DD." The length of the string is 11 bytes including NULL.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDateStamp(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDateStamp tag.
            Field description: A character string recording date and time information relative to UTC (Coordinated Universal Time). The format is "YYYY:MM:DD." The length of the string is 11 bytes including NULL.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDifferentialAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of GPSDifferential tag.
            Field description: Indicates whether differential correction is applied to the GPS receiver. 0 = Measurement without differential correction. 1 = Differential correction applied.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadGpsDifferential(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of GPSDifferential tag.
            Field description: Indicates whether differential correction is applied to the GPS receiver. 0 = Measurement without differential correction. 1 = Differential correction applied.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadInteroperabilityIndexAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of InteroperabilityIndex tag.
            Field description: Indicates the identification of the Interoperability rule.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.Exif.TiffTagExifReaderExtensions.ReadInteroperabilityIndex(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of InteroperabilityIndex tag.
            Field description: Indicates the identification of the Interoperability rule.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.ITiffImageDecoderMiddleware">
            <summary>
            Represents a middleware in the image decoder pipeline.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.ITiffImageDecoderMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <summary>
            Run this middleware.
            </summary>
            <param name="context">Information of the current decoding process.</param>
            <param name="next">The next middleware in the decoder pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when this middleware completes running.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode">
            <summary>
            A node in the decoder pipeline.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode.RunAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext)">
            <summary>
            Run the middleware of this node as well as the following middlewares in the pipeline.
            </summary>
            <param name="context">Information of the current decoding process.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when this middleware completes running.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.ITiffParallelMutexService">
            <summary>
            Provides methods to lock writer resources using a mutex object.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.ITiffParallelMutexService.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquire a mutex lock.
            </summary>
            The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.
            <returns>The lock object.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1">
            <summary>
            Information of the current decoding process.
            </summary>
            <typeparam name="TDestinationPixel">The pixel type of the destination writer.</typeparam>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.CancellationToken">
            <summary>
            The <see cref="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.OperationContext">
            <summary>
            Parameters of how the TIFF file should be parsed.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.ContentReader">
            <summary>
            The content reader to read data from.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.PlanarRegions">
            <summary>
            The regions in the stream to read each plane data from.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.UncompressedData">
            <summary>
            Data decompressed from raw data. (It should contains enough data for SourceReadOffset and ReadSize)
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.SourceImageSize">
            <summary>
            Image size of the decompressed data.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.SourceReadOffset">
            <summary>
            Read offset from source image (decompressed image).
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.ReadSize">
            <summary>
            The size of the image to read from the uncompressed data and write to destination buffer.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.DestinationWriter">
            <summary>
            The pixel buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.PixelConverterFactory">
            <summary>
            A factory instance for creating <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/> object to convert from one pixel format to another.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.GetWriter``1">
            <summary>
            A function to get destination buffer in the specified pixel format.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.RegisterService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffDefaultImageDecoderContext`1.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffImageDecoderContext">
            <summary>
            Information of the current decoding process.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.CancellationToken">
            <summary>
            The <see cref="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.IsLittleEndian">
            <summary>
            Gets whether the uncompressed data is little endian.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.OperationContext">
            <summary>
            Parameters of how the TIFF file should be parsed.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.ContentReader">
            <summary>
            The content reader to read data from.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.PlanarRegions">
            <summary>
            The regions in the stream to read each plane data from.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.UncompressedData">
            <summary>
            Data decompressed from raw data. (It should contains enough data for SourceImageSize)
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.SourceImageSize">
            <summary>
            Image size of the decompressed data.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.SourceReadOffset">
            <summary>
            Read offset from source image (decompressed image).
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderContext.ReadSize">
            <summary>
            The size of the image to read from the uncompressed data and write to destination buffer.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderContext.GetWriter``1">
            <summary>
            A function to get destination buffer in the specified pixel format.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderContext.RegisterService(System.Type,System.Object)">
            <summary>
            Register a service with the current context.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <param name="service">The service instance.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderContext.GetService(System.Type)">
            <summary>
            Get the service of the specified type.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffImageDecoderParameters">
            <summary>
            Parameters for <see cref="T:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter"/> to decode an IFD.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.OperationContext">
            <summary>
            Parameters of how the TIFF file should be parsed.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.ContentSource">
            <summary>
            An instance for opening <see cref="T:TiffLibrary.TiffFileContentReader"/> of specified TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.ImageFileDirectory">
            <summary>
            The IFD to be decoded.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.PixelConverterFactory">
            <summary>
            A factory instance for creating <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/> object to convert from one pixel format to another.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.ImageSize">
            <summary>
            The with and height defined in  ImageWidth and ImageLength tags.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderParameters.Orientation">
            <summary>
            The orientation defined in the Orientation tag.
            </summary>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter">
            <summary>
            Wraps over middleware list to provide <see cref="T:TiffLibrary.TiffImageDecoder"/> functionality.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter.#ctor(TiffLibrary.ImageDecoder.TiffImageDecoderParameters,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <summary>
            Initialize the adapterwith the specified pipelines.
            </summary>
            <param name="parameters">Parameters of this TIFF file and IFD.</param>
            <param name="pipeline">The pipeline to use for decoding the IFD.</param>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter.Width">
            <summary>
            The image width after orientation.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter.Height">
            <summary>
            The image height after orientation.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter.Decode``1(TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0})">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineAdapter.DecodeAsync``1(TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineBuilder">
            <summary>
            A builder that builds the decoder pipeline by connecting all the middlewares added to this builder.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineBuilder.#ctor">
            <summary>
            Initialize the builder.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineBuilder.Add(TiffLibrary.ImageDecoder.ITiffImageDecoderMiddleware)">
            <summary>
            Adds a middleware to the end of the pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineBuilder.InsertFirst(TiffLibrary.ImageDecoder.ITiffImageDecoderMiddleware)">
            <summary>
            Adds a middleware to the front of the pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecoderPipelineBuilder.Build">
            <summary>
            Builds a linked list of middlewares from the middlewares added to the builder.
            </summary>
            <returns>The beginning of the middleware list.</returns>
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffImageDecompressionMiddleware">
            <summary>
            A middleware that handles decompression of the input image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecompressionMiddleware.#ctor(TiffLibrary.TiffPhotometricInterpretation,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffValueCollection{System.Int32},System.Boolean,TiffLibrary.Compression.ITiffDecompressionAlgorithm)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="photometricInterpretation">The photometric interpretation of the image.</param>
            <param name="bitsPerSample">Bits per sample.</param>
            <param name="bytesPerScanlines">Byte count per scanline.</param>
            <param name="useYCbCrLayout">Whether YCbCr buffer layout should be used.</param>
            <param name="decompressionAlgorithm">The decompression algorithm.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffImageDecompressionMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling16Middleware">
            <summary>
            A middleware that reverse chroma subsampling for 16-bit YCbCr image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling16Middleware.#ctor(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="horizontalSubsampling">The horizontal subsampling factor.</param>
            <param name="verticalSubsampling">The vertical subsampling factor.</param>
            <param name="isPlanar">Whether thid IFD is planar configuration.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling16Middleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling8Middleware">
            <summary>
            A middleware that reverse chroma subsampling for 8-bit YCbCr image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling8Middleware.#ctor(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="horizontalSubsampling">The horizontal subsampling factor.</param>
            <param name="verticalSubsampling">The vertical subsampling factor.</param>
            <param name="isPlanar">Whether thid IFD is planar configuration.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseChromaSubsampling8Middleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffReverseOrientationMiddleware">
            <summary>
            A middleware that handles orientation of the source image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseOrientationMiddleware.#ctor(TiffLibrary.TiffOrientation)">
            <summary>
            Initialize the middleware with the specified orientation.
            </summary>
            <param name="orientation">The orientation tag.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReverseOrientationMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffReversePredictorMiddleware">
            <summary>
            A middleware that reverse predictor in the source image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReversePredictorMiddleware.#ctor(TiffLibrary.TiffValueCollection{System.Int32},TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffPredictor)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="bytesPerScanlines">Byte count per scanline.</param>
            <param name="bitsPerSample">Bits per sample.</param>
            <param name="predictor">The predictor tag.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffReversePredictorMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffStrippedImageDecoderEnumeratorMiddleware">
            <summary>
            A middleware that reads all the strips from the IFD and runs the following middlewares in the pipeline for each strip.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffStrippedImageDecoderEnumeratorMiddleware.#ctor(System.Int32,TiffLibrary.TiffValueCollection{System.UInt64},TiffLibrary.TiffValueCollection{System.UInt64},System.Int32)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="rowsPerStrip">Rows per strip.</param>
            <param name="stripOffsets">The StripOffsets tag.</param>
            <param name="stripsByteCount">The StripsByteCount tag.</param>
            <param name="planeCount">The number of planes.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffStrippedImageDecoderEnumeratorMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageDecoder.TiffTiledImageDecoderEnumeratorMiddleware">
            <summary>
            A middleware that reads all the tiles from the IFD and runs the following middlewares in the pipeline for each tiles.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffTiledImageDecoderEnumeratorMiddleware.#ctor(System.Int32,System.Int32,TiffLibrary.TiffValueCollection{System.UInt64},TiffLibrary.TiffValueCollection{System.UInt64},System.Int32)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="tileWidth">The TileWidth tag.</param>
            <param name="tileHeight">The TileLength tag.</param>
            <param name="tileOffsets">The TileOffsets tag.</param>
            <param name="tileByteCounts">The TileByteCounts tag.</param>
            <param name="planeCount">The plane count.</param>
        </member>
        <member name="M:TiffLibrary.ImageDecoder.TiffTiledImageDecoderEnumeratorMiddleware.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageEncoder.ITiffImageEncoderMiddleware`1">
            <summary>
            Represents a middleware in the image encoder pipeline.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.ITiffImageEncoderMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Run this middleware.
            </summary>
            <param name="context">Information of the current encoding process.</param>
            <param name="next">The next middleware in the encoder pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when this middleware completes running.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode`1">
            <summary>
            A node in the encoder pipeline.
            </summary>
            <typeparam name="TPixel"></typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode`1.RunAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0})">
            <summary>
            Run the middleware of this node as well as the following middlewares in the pipeline.
            </summary>
            <param name="context">Information of the current encoding process.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when this middleware completes running.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.ITiffParallelMutexService">
            <summary>
            Provides methods to lock writer resources using a mutex object.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.ITiffParallelMutexService.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquire a mutex lock.
            </summary>
            The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.
            <returns>The lock object.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffApplyChromaSubsamplingMiddleware`1">
            <summary>
            A middleware that apply subsampling to the input image.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyChromaSubsamplingMiddleware`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="horizontalSubsampling">The horizontal subsampling factor.</param>
            <param name="verticalSubsampling">The vertical subsampling factor.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyChromaSubsamplingMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Apply chroma subsampling to <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.UncompressedData"/>, and runs the next middleware.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyChromaSubsamplingMiddleware`1.GetFieldWriter">
            <summary>
            The middleware that can be used to write YCbCrSubSampling field.
            </summary>
            <returns>The middleware to write YCbCrSubSampling field</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffApplyOrientationMiddleware`1">
            <summary>
            A middleware that handles orientation of the input image.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyOrientationMiddleware`1.#ctor(TiffLibrary.TiffOrientation)">
            <summary>
            Initialize the middleware with the specified orientation.
            </summary>
            <param name="orientation">The orientation tag.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyOrientationMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Wraps <paramref name="context"/> in a new context with the updated <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.ImageSize"/> as well as a wrapped reader that handles orientation. Then runs the <paramref name="next"/> middleware with the replaced context. Writes the <see cref="F:TiffLibrary.TiffTag.Orientation"/> tag to the IFD writer.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffApplyPredictorMiddleware`1">
            <summary>
            A middleware that apply predictor to the input image.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyPredictorMiddleware`1.#ctor(TiffLibrary.TiffPredictor)">
            <summary>
            Initialize the middleware with the specified predictor.
            </summary>
            <param name="predictor"></param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffApplyPredictorMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Apply the predictor to <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.UncompressedData"/>, and runs the next middleware. Writes the <see cref="F:TiffLibrary.TiffTag.Predictor"/> tag to IFD writer.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1">
            <summary>
            Information of the current encoding process.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.CancellationToken">
            <summary>
            The <see cref="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.FileWriter">
            <summary>
            The <see cref="T:TiffLibrary.TiffFileWriter"/> to write image data as well as fields data to.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.IfdWriter">
            <summary>
            The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> to write image file directory fields to.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.PhotometricInterpretation">
            <summary>
            The photometric interpretation of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.BitsPerSample">
            <summary>
            Bits per sample of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.ImageSize">
            <summary>
            The size of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.UncompressedData">
            <summary>
            Used to hold temporary pixel buffer.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.OutputRegion">
            <summary>
            The <see cref="T:TiffLibrary.TiffStreamRegion"/> written when encoding this image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.PixelBufferReader">
            <summary>
            Gets or sets the reader to read pixels from.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.PixelConverterFactory">
            <summary>
            A <see cref="T:TiffLibrary.PixelConverter.ITiffPixelConverterFactory"/> implementation to create converters for <see cref="T:TiffLibrary.ITiffPixelBufferWriter`1"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.GetReader">
            <summary>
            Gets the reader to read pixels from.
            </summary>
            <returns>The reader to read pixels from.</returns>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.ConvertWriter``1(TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Converts pixel buffer writer of any pixel format <typeparamref name="TBuffer"/> into <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/>.
            </summary>
            <typeparam name="TBuffer">The specified pixel type.</typeparam>
            <param name="writer">The writer to be converted.</param>
            <returns>The converted writer.</returns>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.RegisterService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffDefaultImageEncoderContext`1.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffImageCompressionMiddleware`1">
            <summary>
            A middleware that handles compression of the input image.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageCompressionMiddleware`1.#ctor(TiffLibrary.TiffCompression,TiffLibrary.Compression.ITiffCompressionAlgorithm)">
            <summary>
            Initialize the middleware with the specified compression.
            </summary>
            <param name="compression">The compression method.</param>
            <param name="compressionAlgorithm">A instance the handles the actual compression.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageCompressionMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Apply compression to <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.UncompressedData"/> and writes the compressed image to <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.FileWriter"/>. Writes <see cref="F:TiffLibrary.TiffTag.Compression"/> to thhe IFD writer and runs the next middleware.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1">
            <summary>
            Information of the current encoding process.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.CancellationToken">
            <summary>
            The <see cref="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.FileWriter">
            <summary>
            The <see cref="T:TiffLibrary.TiffFileWriter"/> to write image data as well as fields data to.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.IfdWriter">
            <summary>
            The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> to write image file directory fields to.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.PhotometricInterpretation">
            <summary>
            The photometric interpretation of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.BitsPerSample">
            <summary>
            Bits per sample of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.ImageSize">
            <summary>
            The size of the current image.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.UncompressedData">
            <summary>
            Used to hold temporary pixel buffer.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.OutputRegion">
            <summary>
            The <see cref="T:TiffLibrary.TiffStreamRegion"/> written when encoding this image.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.GetReader">
            <summary>
            Gets the reader to read pixels from.
            </summary>
            <returns>The reader to read pixels from.</returns>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.ConvertWriter``1(TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Converts pixel buffer writer of any pixel format <typeparamref name="TBuffer"/> into <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/>.
            </summary>
            <typeparam name="TBuffer">The specified pixel type.</typeparam>
            <param name="writer">The writer to be converted.</param>
            <returns>The converted writer.</returns>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.RegisterService(System.Type,System.Object)">
            <summary>
            Register a service with the current context.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <param name="service">The service instance.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderContext`1.GetService(System.Type)">
            <summary>
            Get the service of the specified type.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>The service instance.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineAdapter`1">
            <summary>
            Wraps over middleware list to provide <see cref="T:TiffLibrary.TiffImageEncoder`1"/> functionality.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineAdapter`1.#ctor(System.Buffers.MemoryPool{System.Byte},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Initialize the adapter with the specified pipelines.
            </summary>
            <param name="memoryPool">The memory pool to use when allocating large chunk of memory.</param>
            <param name="imageEncoder">The pipeline to use for encoding a single image.</param>
            <param name="ifdEncoder">The pipeline to use for encoding an IFD.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineAdapter`1.EncodeAsync(TiffLibrary.TiffFileWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferReader{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineAdapter`1.EncodeAsync(TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferReader{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineBuilder`1">
            <summary>
            A builder that builds the encoder pipeline by connecting all the middlewares added to this builder.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineBuilder`1.#ctor">
            <summary>
            Initialize the builder.
            </summary>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineBuilder`1.Add(TiffLibrary.ImageEncoder.ITiffImageEncoderMiddleware{`0})">
            <summary>
            Adds a middleware to the end of the pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineBuilder`1.InsertFirst(TiffLibrary.ImageEncoder.ITiffImageEncoderMiddleware{`0})">
            <summary>
            Adds a middleware to the front of the pipeline.
            </summary>
            <param name="middleware">The middleware to add.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPipelineBuilder`1.Build">
            <summary>
            Builds a linked list of middlewares from the middlewares added to the builder.
            </summary>
            <returns>The beginning of the middleware list.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffImageEncoderPaddingMiddleware`1">
            <summary>
            A middlewares that expand the input image to a specified size.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPaddingMiddleware`1.#ctor(TiffLibrary.TiffSize)">
            <summary>
            Initialize the middleware with the specified padding size.
            </summary>
            <param name="paddingSize">The padding size.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffImageEncoderPaddingMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Wraps the <paramref name="context"/> in a new context that handles extending the input image if either width or height of the input image is less than those specified in the constructor. Then runs the next middleware with the wrapped context.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions">
            <summary>
            Options to use when encoding with JPEG compression.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.Quality">
            <summary>
            Gets or sets the JPEG encoding quality factor when compressing using JPEG.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.UseSharedHuffmanTables">
            <summary>
            When <see cref="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.UseSharedHuffmanTables"/> is set, JPEG huffman tables are written into the JPEGTables tag in the IFD. This option enables sharing huffman table definitions across strips or tiles.
            It is ignored and assumed to be false when <see cref="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.OptimizeCoding"/> is set.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.UseSharedQuantizationTables">
            <summary>
            When <see cref="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.UseSharedQuantizationTables"/> is set, JPEG quantization tables are written into the JPEGTables tag in the IFD. This option enables sharing quantization table definitions across strips or tiles.
            </summary>
        </member>
        <member name="P:TiffLibrary.ImageEncoder.TiffJpegEncodingOptions.OptimizeCoding">
            <summary>
            When this flag is set, optimal Huffman tables are generated for each strip or tile.
            </summary>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffStrippedImageEncoderEnumeratorMiddleware`1">
            <summary>
            A middleware that crops the input image into strips.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffStrippedImageEncoderEnumeratorMiddleware`1.#ctor(System.Int32)">
            <summary>
            Initialize the middleware with the specified rows per strip.
            </summary>
            <param name="rowsPerStrip">Number of rows per strip.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffStrippedImageEncoderEnumeratorMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Crops the input image into multiple strips and runs the next middleware for each strip.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.ImageEncoder.TiffTiledImageEncoderEnumeratorMiddleware`1">
            <summary>
            A middleware that crops the input image into tiles.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffTiledImageEncoderEnumeratorMiddleware`1.#ctor(TiffLibrary.TiffSize)">
            <summary>
            Initialize the middleware with the specified tile size.
            </summary>
            <param name="tileSize">The size of each tile.</param>
        </member>
        <member name="M:TiffLibrary.ImageEncoder.TiffTiledImageEncoderEnumeratorMiddleware`1.InvokeAsync(TiffLibrary.ImageEncoder.TiffImageEncoderContext{`0},TiffLibrary.ImageEncoder.ITiffImageEncoderPipelineNode{`0})">
            <summary>
            Crops the input image into tiles and runs the next middleware for each tile.
            </summary>
            <param name="context">The encoder context.</param>
            <param name="next">The next middleware.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.TiffImageEncoderBuilder">
            <summary>
            A builder object to build a <see cref="T:TiffLibrary.TiffImageEncoder`1"/> instance.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.PhotometricInterpretation">
            <summary>
            Gets or sets the photometric interpretation to use for the input image.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.Compression">
            <summary>
            Gets or sets the compression method to use when compressing input image.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.IsTiled">
            <summary>
            Gets or sets whether the output TIFF file should be a tiled TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.RowsPerStrip">
            <summary>
            Gets or sets the number of rows when the output TIFF file is a stripped TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.TileSize">
            <summary>
            Gets or sets the tile size when the output TIFF file is a tiled TIFF file. Both with and height should be multiples of 16.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.Predictor">
            <summary>
            Gets or sets the predictor to use on the image.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.EnableTransparencyForRgb">
            <summary>
            Gets or sets whether to write alpha channel when write RGB image. Only used when <see cref="P:TiffLibrary.TiffImageEncoderBuilder.PhotometricInterpretation"/> is set to <see cref="F:TiffLibrary.TiffPhotometricInterpretation.RGB"/>.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.Orientation">
            <summary>
            Gets or sets the orientation in the output TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.DeflateCompressionLevel">
            <summary>
            The compression level used in Deflate algorithm. A value of 9 is best, and 1 is least compression. The default is 6.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.JpegOptions">
            <summary>
            Gets or sets the options to use when encoding with JPEG compression. Only used when <see cref="P:TiffLibrary.TiffImageEncoderBuilder.Compression"/> is set to <see cref="F:TiffLibrary.TiffCompression.Jpeg"/>.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.HorizontalChromaSubSampling">
            <summary>
            Gets or sets the horizontal chroma subsampling factor for YCbCr image.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.VerticalChromaSubSampling">
            <summary>
            Gets or sets the vertical chroma subsampling factor for YCbCr image.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageEncoderBuilder.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the maximum number of concurrent encoding pipelines enabled by this <see cref="T:TiffLibrary.TiffImageEncoderBuilder"/> instance.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderBuilder.Build``1">
            <summary>
            Build the <see cref="T:TiffLibrary.TiffImageEncoder`1"/> instance with the specified pixel format of input image.
            </summary>
            <typeparam name="TPixel">The pixel type of the input image.</typeparam>
            <returns>The <see cref="T:TiffLibrary.TiffImageEncoder`1"/> instance.</returns>
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero16Interpreter">
            <summary>
            A middleware to read 16-bit BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero16Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero16Interpreter"/>
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero16Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero1Interpreter">
            <summary>
            A middleware to read 1-bit BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero1Interpreter.#ctor(TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified fill order.
            </summary>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero1Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero4Interpreter">
            <summary>
            A middleware to read 4-bit BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero4Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero4Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero4Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero8Interpreter">
            <summary>
            A middleware to read 8-bit BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero8Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero8Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZero8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny16Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny16Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny16Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny32Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny32Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny32Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny8Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) BlackIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny8Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffBlackIsZeroAny8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk16161616Interpreter">
            <summary>
            A middleware to read 16-bit CMYK pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk16161616Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk16161616Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk16161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk8888Interpreter">
            <summary>
            A middleware to read 8-bit CMYK pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk8888Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk8888Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyCmyk8888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb161616Interpreter">
            <summary>
            A middleware to read 16-bit RGB pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb161616Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb161616Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb888Interpreter">
            <summary>
            A middleware to read 8-bit RGB pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb888Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb888Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgb888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba16161616Interpreter">
            <summary>
            A middleware to read 16-bit RGBA pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba16161616Interpreter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba16161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba8888Interpreter">
            <summary>
            A middleware to read 8-bit RGBA pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba8888Interpreter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgba8888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny16161616Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) RGBA pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny16161616Interpreter.#ctor(System.Boolean,System.Boolean,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny16161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny32323232Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) RGBA pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny32323232Interpreter.#ctor(System.Boolean,System.Boolean,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny32323232Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny8888Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) RGBA pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny8888Interpreter.#ctor(System.Boolean,System.Boolean,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbaAny8888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny161616Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) RGB pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny161616Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny323232Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) RGB pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny323232Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny323232Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny888Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) RGB pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny888Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyRgbAny888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr161616Interpreter">
            <summary>
            A middleware to read 16-bit YCbCr pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr161616Interpreter.#ctor">
            <summary>
            Initialize the middleware with the default YCbCrCoefficients and ReferenceBlackWhite tags.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr161616Interpreter.#ctor(TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational},TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational})">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="coefficients">The YCbCrCoefficients tag.</param>
            <param name="referenceBlackWhite">The ReferenceBlackWhite tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr888Interpreter">
            <summary>
            A middleware to read 8-bit YCbCr pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr888Interpreter.#ctor">
            <summary>
            Initialize the middleware with the default YCbCrCoefficients and ReferenceBlackWhite tags.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr888Interpreter.#ctor(TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational},TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational})">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="coefficients">The YCbCrCoefficients tag.</param>
            <param name="referenceBlackWhite">The ReferenceBlackWhite tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffChunkyYCbCr888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPaletteColor4Interpreter">
            <summary>
            A middleware to read 4-bit PaletteColor pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColor4Interpreter.#ctor(System.UInt16[])">
            <summary>
            Initialize the middleware with the specified color map.
            </summary>
            <param name="colorMap">The color map.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColor4Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPaletteColor8Interpreter">
            <summary>
            A middleware to read 8-bit PaletteColor pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColor8Interpreter.#ctor(System.UInt16[])">
            <summary>
            Initialize the middleware with the specified color map.
            </summary>
            <param name="colorMap">The color map.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColor8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPaletteColorAny8Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) PaletteColor pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColorAny8Interpreter.#ctor(System.UInt16[],System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="colorMap">The color map.</param>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPaletteColorAny8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk16161616Interpreter">
            <summary>
            A middleware to read 16-bit CMYK planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk16161616Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk16161616Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk16161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk8888Interpreter">
            <summary>
            A middleware to read 8-bit CMYK planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk8888Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk8888Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarCmyk8888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb161616Interpreter">
            <summary>
            A middleware to read 16-bit RGB planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb161616Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb161616Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb888Interpreter">
            <summary>
            A middleware to read 8-bit RGB planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb888Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb888Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgb888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny32323232Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) RGBA planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny32323232Interpreter.#ctor(System.Boolean,System.Boolean,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny32323232Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny16161616Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) RGBA planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny16161616Interpreter.#ctor(System.Boolean,System.Boolean,TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="isAlphaAssociated">Whether the alpha channel is associated.</param>
            <param name="undoColorPreMultiplying">Whether to undo color pre-multiplying.</param>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbaAny16161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny161616Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) RGB planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny161616Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny323232Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) RGB planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny323232Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny323232Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny888Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) RGB planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny888Interpreter.#ctor(TiffLibrary.TiffValueCollection{System.UInt16},TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bits per sample and fill order.
            </summary>
            <param name="bitsPerSample">The BitsPerSample flags.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarRgbAny888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr161616Interpreter">
            <summary>
            A middleware to read 16-bit YCbCr planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr161616Interpreter.#ctor">
            <summary>
            Initialize the middleware with the default YCbCrCoefficients and ReferenceBlackWhite tags.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr161616Interpreter.#ctor(TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational},TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational})">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="coefficients">The YCbCrCoefficients tag.</param>
            <param name="referenceBlackWhite">The ReferenceBlackWhite tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr161616Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr888Interpreter">
            <summary>
            A middleware to read 8-bit YCbCr planar pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr888Interpreter.#ctor">
            <summary>
            Initialize the middleware with the default YCbCrCoefficients and ReferenceBlackWhite tags.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr888Interpreter.#ctor(TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational},TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational})">
            <summary>
            Initialize the middleware.
            </summary>
            <param name="coefficients">The YCbCrCoefficients tag.</param>
            <param name="referenceBlackWhite">The ReferenceBlackWhite tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffPlanarYCbCr888Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffTransparencyMask1Interpreter">
            <summary>
            A middleware to read 1-bit TransparencyMask pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffTransparencyMask1Interpreter.#ctor(TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified fill order.
            </summary>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffTransparencyMask1Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero16Interpreter">
            <summary>
            A middleware to read 16-bit WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero16Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero16Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero16Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero1Interpreter">
            <summary>
            A middleware to read 1-bit WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero1Interpreter.#ctor(TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified fill order.
            </summary>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero1Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero4Interpreter">
            <summary>
            A middleware to read 4-bit WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero4Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero4Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero4Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero8Interpreter">
            <summary>
            A middleware to read 8-bit WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="P:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero8Interpreter.Instance">
            <summary>
            A shared instance of <see cref="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero8Interpreter"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZero8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny16Interpreter">
            <summary>
            A middleware to read any bits (less than 16 bits) WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny16Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny16Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny32Interpreter">
            <summary>
            A middleware to read any bits (less than 32 bits) WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny32Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny32Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny8Interpreter">
            <summary>
            A middleware to read any bits (less than 8 bits) WhiteIsZero pixels from uncompressed data to destination buffer writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny8Interpreter.#ctor(System.Int32,TiffLibrary.TiffFillOrder)">
            <summary>
            Initialize the middleware with the specified bit count and fill order.
            </summary>
            <param name="bitCount">The bit count.</param>
            <param name="fillOrder">The FillOrder tag.</param>
        </member>
        <member name="M:TiffLibrary.PhotometricInterpreters.TiffWhiteIsZeroAny8Interpreter.InvokeAsync(TiffLibrary.ImageDecoder.TiffImageDecoderContext,TiffLibrary.ImageDecoder.ITiffImageDecoderPipelineNode)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.ITiffPixelBuffer`1">
            <summary>
            Represents a 2-dimensional region of pixels in a contiguous memory buffer in row-major order.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBuffer`1.Width">
            <summary>
            The number of columns in the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBuffer`1.Height">
            <summary>
            The number of rows in the region.
            </summary>
        </member>
        <member name="M:TiffLibrary.ITiffPixelBuffer`1.GetSpan">
            <summary>
            Gets a <see cref="T:System.Span`1"/> representing memory of the entire region in row-major order.
            </summary>
            <returns>A <see cref="T:System.Span`1"/> representing memory of the entire region in row-major order.</returns>
        </member>
        <member name="M:TiffLibrary.ITiffPixelBuffer`1.GetReadOnlySpan">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> representing memory of the entire region in row-major order.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> representing memory of the entire region in row-major order.</returns>
        </member>
        <member name="T:TiffLibrary.ITiffPixelBufferReader`1">
            <summary>
            Represents a reader object capable of copying 2-dimensional pixel data from its storage into a specified <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBufferReader`1.Width">
            <summary>
            The number of columns in the region the reader object provides.
            </summary>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBufferReader`1.Height">
            <summary>
            The number of rows in the region the reader object provides.
            </summary>
        </member>
        <member name="M:TiffLibrary.ITiffPixelBufferReader`1.ReadAsync(TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{`0},System.Threading.CancellationToken)">
            <summary>
            Copy the 2-dimensional pixel data into <paramref name="destination"/>, after skipping some rows and columns specified in <paramref name="offset"/>.
            </summary>
            <param name="offset">The number rows and columns to skip. X represents the number of columns to skip; Y represents the number of rows to skip.</param>
            <param name="destination">The destination writer. It also limits the number of rows and columns to copy.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when all the requested pixels are copied.</returns>
        </member>
        <member name="T:TiffLibrary.ITiffPixelBufferWriter`1">
            <summary>
            Represents a write-only 2-dimensional region of pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBufferWriter`1.Width">
            <summary>
            The number of columns in the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.ITiffPixelBufferWriter`1.Height">
            <summary>
            The number of rows in the region.
            </summary>
        </member>
        <member name="M:TiffLibrary.ITiffPixelBufferWriter`1.GetRowSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="rowIndex"/> row of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="start">Number of pixels to skip in this row.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="M:TiffLibrary.ITiffPixelBufferWriter`1.GetColumnSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="colIndex"/> column of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="start">Number of pixels to skip in this column.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffPixelBufferReaderAdapter`1">
            <summary>
            Uses <see cref="T:TiffLibrary.ITiffPixelBuffer`1"/> as the underlying storage. Provides <see cref="T:TiffLibrary.ITiffPixelBufferReader`1"/> API to read pixels from <see cref="T:TiffLibrary.ITiffPixelBuffer`1"/>.
            </summary>
            <typeparam name="TPixel"></typeparam>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferReaderAdapter`1.#ctor(TiffLibrary.ITiffPixelBuffer{`0})">
            <summary>
            Initialize the object to wrap <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The pixel buffer to wrap.</param>
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffPixelBufferReaderAdapter`1.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffPixelBufferReaderAdapter`1.Height">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferReaderAdapter`1.ReadAsync(TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffPixelBufferUnsafeMarshal">
            <summary>
            Contains methods to extract inner buffer from pixel buffer related structure.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferUnsafeMarshal.GetBuffer``1(TiffLibrary.TiffPixelBuffer{``0}@,TiffLibrary.TiffPoint@,TiffLibrary.TiffSize@)">
            <summary>
            Extract inner buffer from <paramref name="buffer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The structure to extract from.</param>
            <param name="offset">The extracted offset.</param>
            <param name="size">The extracted size.</param>
            <returns>The extracted inner buffer.</returns>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferUnsafeMarshal.GetBuffer``1(TiffLibrary.TiffPixelBufferWriter{``0}@,TiffLibrary.TiffPoint@,TiffLibrary.TiffSize@)">
            <summary>
            Extract inner buffer from <paramref name="writer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The structure to extract from.</param>
            <param name="offset">The extracted offset.</param>
            <param name="size">The extracted size.</param>
            <returns>The extracted inner buffer.</returns>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferUnsafeMarshal.GetBuffer``1(TiffLibrary.TiffPixelBufferReader{``0}@,TiffLibrary.TiffPoint@,TiffLibrary.TiffSize@)">
            <summary>
            Extract inner buffer from <paramref name="reader"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The structure to extract from.</param>
            <param name="offset">The extracted offset.</param>
            <param name="size">The extracted size.</param>
            <returns>The extracted inner buffer.</returns>
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1">
            <summary>
            Uses <see cref="T:TiffLibrary.ITiffPixelBuffer`1"/> as the underlying storage. Provides <see cref="T:TiffLibrary.ITiffPixelBufferWriter`1"/> API to write pixels into <see cref="T:TiffLibrary.ITiffPixelBuffer`1"/>.
            </summary>
            <typeparam name="TPixel"></typeparam>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.#ctor(TiffLibrary.ITiffPixelBuffer{`0})">
            <summary>
            Initialize the object to wrap <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The pixel buffer to wrap.</param>
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.Height">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.GetRowSpan(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.GetColumnSpan(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelBufferWriterAdapter`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1">
            <summary>
            Represents a temporary consecutive memory buffer of a span of pixels.  
            </summary>
            <typeparam name="TPixel">The type of pixel in the span.</typeparam>
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1.Length">
            <summary>
            The number of pixels that this buffer contains.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1.GetSpan">
            <summary>
            Gets a <see cref="T:System.Span`1"/> representing the consecutive memory buffer of a span of pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1.Dispose">
            <summary>
            Flush the pixels into underlying storage, and release all the resources related to this object. The consumer of this object should no longer use it after Dispose is called.
            </summary>
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter">
            <summary>
            Provide methods to create <see cref="T:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1"/>
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter.Wrap``1(TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Wraps a <see cref="T:TiffLibrary.ITiffPixelBufferWriter`1"/> and creates <see cref="T:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The writer to wrap.</param>
            <returns></returns>
        </member>
        <member name="T:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1">
            <summary>
            Provides wrapper of <see cref="T:TiffLibrary.ITiffPixelBufferWriter`1"/> and block Dispose calls.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.#ctor(TiffLibrary.ITiffPixelBufferWriter{`0})">
            <summary>
            Create the instance from the specified writer.
            </summary>
            <param name="writer">The writer to wrap.</param>
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.Width">
            <summary>
            The number of columns in the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.Height">
            <summary>
            The number of rows in the region.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.Dispose">
            <summary>
            This is no op.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.GetRowSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="rowIndex"/> row of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="start">Number of pixels to skip in this row.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="M:TiffLibrary.PixelBuffer.TiffNoopDisposablePixelBufferWriter`1.GetColumnSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="colIndex"/> column of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="start">Number of pixels to skip in this column.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBuffer`1">
            <summary>
            Represents a 2-dimensional region or sub-region of pixels in a contiguous memory buffer in row-major order.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer`1.#ctor(TiffLibrary.ITiffPixelBuffer{`0})">
            <summary>
            Initialize <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> to wrap <paramref name="buffer"/> and represents the same region as <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The pixel buffer. If <paramref name="buffer"/> is null, <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> will be empty and represents an emtry 2-dimensional region.</param>
        </member>
        <member name="P:TiffLibrary.TiffPixelBuffer`1.Width">
            <summary>
            The number of columns in the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffPixelBuffer`1.Height">
            <summary>
            The number of rows in the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffPixelBuffer`1.IsEmpty">
            <summary>
            Gets whether this region is empty, or the area of the region is zero.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer`1.CreateWriter">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> adapter to write pixels into the current pixel buffer.
            </summary>
            <returns>The <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> adapter.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer`1.CreateReader">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> adapter to reader pixels from the current pixel buffer.
            </summary>
            <returns>The <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> adapter.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBuffer">
            <summary>
            Helper class for creating pixel buffer.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer.Wrap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Initial a pixel buffer that wraps a existing <typeparamref name="TPixel"/>[].
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <returns>The pixel buffer created.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer.Wrap``1(System.Memory{``0},System.Int32,System.Int32)">
            <summary>
            Initial a pixel buffer that wraps a existing Memory&lt;<typeparamref name="TPixel"/>&gt;.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <returns>The pixel buffer created.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer.WrapReadOnly``1(``0[],System.Int32,System.Int32)">
            <summary>
            Initial a read-only pixel buffer that wraps a existing <typeparamref name="TPixel"/>[].
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <returns>The pixel buffer created.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBuffer.WrapReadOnly``1(System.ReadOnlyMemory{``0},System.Int32,System.Int32)">
            <summary>
            Initial a read-only pixel buffer that wraps a existing Memory&lt;<typeparamref name="TPixel"/>&gt;.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <returns>The pixel buffer created.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBufferExtensions">
            <summary>
            Contains extension methods to manipulate <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> structure.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferExtensions.AsPixelBuffer``1(TiffLibrary.ITiffPixelBuffer{``0})">
            <summary>
            Wraps <paramref name="buffer"/> in <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> structure.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The pixel buffer.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> wrapping <paramref name="buffer"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferExtensions.Crop``1(TiffLibrary.ITiffPixelBuffer{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="buffer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferExtensions.Crop``1(TiffLibrary.ITiffPixelBuffer{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="buffer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferExtensions.Crop``1(TiffLibrary.TiffPixelBuffer{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="buffer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferExtensions.Crop``1(TiffLibrary.TiffPixelBuffer{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="buffer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="buffer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBufferReader`1">
            <summary>
            Represents a reader object capable of copying 2-dimensional pixel data from its storage into a specified <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReader`1.#ctor(TiffLibrary.ITiffPixelBufferReader{`0})">
            <summary>
            Initialize <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> to wrap <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader to wrap.</param>
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferReader`1.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferReader`1.Height">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferReader`1.IsEmpty">
            <summary>
            Gets whether this region is empty, or the area of the region is zero.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReader`1.ReadAsync(TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{`0},System.Threading.CancellationToken)">
            <summary>
            Copy the 2-dimensional pixel data into <paramref name="destination"/>, after skipping some rows and columns specified in <paramref name="offset"/>.
            </summary>
            <param name="offset">The number rows and columns to skip. X represents the number of columns to skip; Y represents the number of rows to skip.</param>
            <param name="destination">The destination writer. It also limits the number of rows and columns to copy.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when all the requested pixels are copied.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReader`1.ReadAsync(TiffLibrary.TiffPixelBufferWriter{`0},System.Threading.CancellationToken)">
            <summary>
            Copy the 2-dimensional pixel data into <paramref name="destination"/>.
            </summary>
            <param name="destination">The destination writer. It limits the number of rows and columns to copy.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when all the requested pixels are copied.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBufferReaderExtensions">
            <summary>
            Contains extension methods to manipulate <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> structure.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReaderExtensions.AsPixelBufferReader``1(TiffLibrary.ITiffPixelBufferReader{``0})">
            <summary>
            Wraps <paramref name="reader"/> in <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> structure.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The pixel buffer reader.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBufferReader`1"/> wrapping <paramref name="reader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReaderExtensions.Crop``1(TiffLibrary.ITiffPixelBufferReader{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="reader"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReaderExtensions.Crop``1(TiffLibrary.ITiffPixelBufferReader{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="reader"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReaderExtensions.Crop``1(TiffLibrary.TiffPixelBufferReader{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="reader"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferReaderExtensions.Crop``1(TiffLibrary.TiffPixelBufferReader{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="reader"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="reader">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="T:TiffLibrary.TiffPixelBufferWriter`1">
            <summary>
            Represents a write-only 2-dimensional region or sub-region of pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriter`1.#ctor(TiffLibrary.ITiffPixelBufferWriter{`0})">
            <summary>
            Initialize <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> to wrap <paramref name="writer"/> and represents the same region as <paramref name="writer"/>.
            </summary>
            <param name="writer">The pixel buffer writer. If <paramref name="writer"/> is null, <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> will be empty and represents an emtry 2-dimensional region.</param>
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferWriter`1.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferWriter`1.Height">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffPixelBufferWriter`1.IsEmpty">
            <summary>
            Gets whether this region is empty, or the area of the region is zero.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriter`1.GetRowSpan(System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="rowIndex"/> row of the region. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="rowIndex">The row index.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriter`1.GetRowSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="rowIndex"/> row of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="start">Number of pixels to skip in this row.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriter`1.GetColumnSpan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing a write-only span of the <paramref name="colIndex"/> column of the region, while skipping <paramref name="start"/> pixels and limiting the length of the span to <paramref name="length"/>. <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> should be disposed after use to flush the pixels into the underlying storage.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="start">Number of pixels to skip in this column.</param>
            <param name="length">Number of pixels to write.</param>
            <returns>A <see cref="T:TiffLibrary.PixelBuffer.TiffPixelSpanHandle`1"/> representing the temporary buffer consumer can write to. When disposed, it will flush the temporary pixels into the actual storage.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriter`1.Dispose">
            <summary>
            Dispose the underlying writer.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffPixelBufferWriterExtensions">
            <summary>
            Contains extension methods to manipulate <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> structure.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriterExtensions.AsPixelBufferWriter``1(TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Wraps <paramref name="writer"/> in <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> structure.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The pixel buffer writer.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBufferWriter`1"/> wrapping <paramref name="writer"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriterExtensions.Crop``1(TiffLibrary.ITiffPixelBufferWriter{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="writer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriterExtensions.Crop``1(TiffLibrary.ITiffPixelBufferWriter{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="writer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriterExtensions.Crop``1(TiffLibrary.TiffPixelBufferWriter{``0},TiffLibrary.TiffPoint)">
            <summary>
            Crop a sub region from <paramref name="writer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPixelBufferWriterExtensions.Crop``1(TiffLibrary.TiffPixelBufferWriter{``0},TiffLibrary.TiffPoint,TiffLibrary.TiffSize)">
            <summary>
            Crop a sub region from <paramref name="writer"/>.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="writer">The original pixel buffer.</param>
            <param name="offset">The number of columns and rows to skip.</param>
            <param name="size">The number of columns and rows to take.</param>
            <returns>A <see cref="T:TiffLibrary.TiffPixelBuffer`1"/> representing the cropped region.</returns>
        </member>
        <member name="T:TiffLibrary.PixelConverter.TiffDefaultPixelConverterFactory">
            <summary>
            A default implementation of <see cref="T:TiffLibrary.PixelConverter.ITiffPixelConverterFactory"/>, providing supports for built-in pixel formats.
            </summary>
        </member>
        <member name="P:TiffLibrary.PixelConverter.TiffDefaultPixelConverterFactory.Instance">
            <summary>
            A shared instance that should be used across the application.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffDefaultPixelConverterFactory.CreateConverter``2(TiffLibrary.ITiffPixelBufferWriter{``1})">
            <summary>
            Create <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/> and wraps <paramref name="writer"/>.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
            <param name="writer">The writer to be wrapped.</param>
            <returns>The created <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/>.</returns>
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffDefaultPixelConverterFactory.IsConvertible``2">
            <summary>
            Checks if this factory is able to create <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/>.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
            <returns>True if this object is able to create the converter.</returns>
        </member>
        <member name="T:TiffLibrary.PixelConverter.ITiffPixelConverterFactory">
            <summary>
            Represents an object capable of creating <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/> object to convert from one pixel format to another.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelConverter.ITiffPixelConverterFactory.IsConvertible``2">
            <summary>
            Checks if this factory is able to create <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/>.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
            <returns>True if this object is able to create the converter.</returns>
        </member>
        <member name="M:TiffLibrary.PixelConverter.ITiffPixelConverterFactory.CreateConverter``2(TiffLibrary.ITiffPixelBufferWriter{``1})">
            <summary>
            Create <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/> and wraps <paramref name="writer"/>.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
            <param name="writer">The writer to be wrapped.</param>
            <returns>The created <see cref="T:TiffLibrary.PixelConverter.TiffPixelConverter`2"/>.</returns>
        </member>
        <member name="T:TiffLibrary.PixelConverter.ITiffPixelSpanConverter`2">
            <summary>
            Represents an object capable of converting one pixel format in the buffer to another pixel format.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
        </member>
        <member name="M:TiffLibrary.PixelConverter.ITiffPixelSpanConverter`2.Convert(System.ReadOnlySpan{`0},System.Span{`1})">
            <summary>
            Method to convert from one pixel format to another.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="destination">The destination buffer.</param>
        </member>
        <member name="T:TiffLibrary.PixelConverter.TiffPixelConverter`2">
            <summary>
            A special kind of <see cref="T:TiffLibrary.ITiffPixelBufferWriter`1"/> implementation that can be useed to convert pixels from one format to another format.
            </summary>
            <typeparam name="TSource">The pixel format to convert from.</typeparam>
            <typeparam name="TDestination">The pixel format to convert to.</typeparam>
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.#ctor(TiffLibrary.ITiffPixelBufferWriter{`1})">
            <summary>
            Wraps <paramref name="writer"/> as the underlying storage.
            </summary>
            <param name="writer">The wrapped writer.</param>
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.#ctor(TiffLibrary.ITiffPixelBufferWriter{`1},System.Boolean)">
            <summary>
            Wraps <paramref name="writer"/> as the underlying storage.
            </summary>
            <param name="writer">The wrapped writer.</param>
            <param name="allowInPlaceConvert">If the size of two pixel formats are the same, set this flag to allow conversion to happen on the same buffer without allocating temporary buffer.</param>
        </member>
        <member name="P:TiffLibrary.PixelConverter.TiffPixelConverter`2.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.PixelConverter.TiffPixelConverter`2.Height">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.GetRowSpan(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.GetColumnSpan(System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.PixelConverter.TiffPixelConverter`2.Convert(System.ReadOnlySpan{`0},System.Span{`1})">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffBgr24">
            <summary>
            Pixel type containing three 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in blue, green, red order (least significant to most significant byte).
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgr24.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgr24.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgr24.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the pixel with the specified blue, green and red values.
            </summary>
            <param name="b">The blue component.</param>
            <param name="g">The green component.</param>
            <param name="r">The red component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.Equals(TiffLibrary.PixelFormats.TiffBgr24)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.op_Equality(TiffLibrary.PixelFormats.TiffBgr24,TiffLibrary.PixelFormats.TiffBgr24)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgr24.op_Inequality(TiffLibrary.PixelFormats.TiffBgr24,TiffLibrary.PixelFormats.TiffBgr24)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffBgra32">
            <summary>
            Pixel type containing four 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in blue, green, red, alpha order (least significant to most significant byte).
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra32.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra32.G">
            <summary>
            Tthe green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra32.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra32.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the pixel with the specified blue, green, red and alpha values.
            </summary>
            <param name="b">The blue component.</param>
            <param name="g">The green component.</param>
            <param name="r">The red component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.Equals(TiffLibrary.PixelFormats.TiffBgra32)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.op_Equality(TiffLibrary.PixelFormats.TiffBgra32,TiffLibrary.PixelFormats.TiffBgra32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra32.op_Inequality(TiffLibrary.PixelFormats.TiffBgra32,TiffLibrary.PixelFormats.TiffBgra32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffBgra64">
            <summary>
            Pixel type containing four 16-bit unsigned normalized values ranging from 0 to 65535.
            The color components are stored in blue, green, red, alpha order (least significant to most significant byte).
            Each component is stored in machine-endian.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra64.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra64.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra64.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffBgra64.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the pixel with the specified blue, green, red and alpha values.
            </summary>
            <param name="b">The blue component.</param>
            <param name="g">The green component.</param>
            <param name="r">The red component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.Equals(TiffLibrary.PixelFormats.TiffBgra64)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.op_Equality(TiffLibrary.PixelFormats.TiffBgra64,TiffLibrary.PixelFormats.TiffBgra64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffBgra64.op_Inequality(TiffLibrary.PixelFormats.TiffBgra64,TiffLibrary.PixelFormats.TiffBgra64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffCmyk32">
            <summary>
            Pixel type containing four 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in cyan, magenta, yellow, black order (least significant to most significant byte).
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk32.C">
            <summary>
            The cyan component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk32.M">
            <summary>
            The magenta component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk32.Y">
            <summary>
            The yellow component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk32.K">
            <summary>
            The black component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the pixel with the specified cyan, magenta, yellow and black values.
            </summary>
            <param name="c">The cyan component.</param>
            <param name="m">The magenta component.</param>
            <param name="y">The yellow component.</param>
            <param name="k">The black component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.Equals(TiffLibrary.PixelFormats.TiffCmyk32)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.op_Equality(TiffLibrary.PixelFormats.TiffCmyk32,TiffLibrary.PixelFormats.TiffCmyk32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk32.op_Inequality(TiffLibrary.PixelFormats.TiffCmyk32,TiffLibrary.PixelFormats.TiffCmyk32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffCmyk64">
            <summary>
            Pixel type containing four 16-bit unsigned normalized values ranging from 0 to 65535.
            The color components are stored in cyan, magenta, yellow, black order (least significant to most significant byte).
            Each component is stored in machine-endian.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk64.C">
            <summary>
            The cyan component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk64.M">
            <summary>
            The magenta component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk64.Y">
            <summary>
            The yellow component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffCmyk64.K">
            <summary>
            The black component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the pixel with the specified cyan, magenta, yellow and black values.
            </summary>
            <param name="c">The cyan component.</param>
            <param name="m">The magenta component.</param>
            <param name="y">The yellow component.</param>
            <param name="k">The black component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.Equals(TiffLibrary.PixelFormats.TiffCmyk64)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.op_Equality(TiffLibrary.PixelFormats.TiffCmyk64,TiffLibrary.PixelFormats.TiffCmyk64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffCmyk64.op_Inequality(TiffLibrary.PixelFormats.TiffCmyk64,TiffLibrary.PixelFormats.TiffCmyk64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffGray16">
            <summary>
            Pixel type containing a single 16 bit intensity value ranging from 0 to 255. The order of bytes is in machine-endian.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffGray16.Intensity">
            <summary>
            The intensity of the pixel.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.#ctor(System.UInt16)">
            <summary>
            Initialize the pixel with the specified intensity value.
            </summary>
            <param name="intensity">The intensity of the pixel.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.Equals(TiffLibrary.PixelFormats.TiffGray16)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.op_Equality(TiffLibrary.PixelFormats.TiffGray16,TiffLibrary.PixelFormats.TiffGray16)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray16.op_Inequality(TiffLibrary.PixelFormats.TiffGray16,TiffLibrary.PixelFormats.TiffGray16)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffGray8">
            <summary>
            Pixel type containing a single 8 bit intensity value ranging from 0 to 255.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffGray8.Intensity">
            <summary>
            The intensity of the pixel.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.#ctor(System.Byte)">
            <summary>
            Initialize the pixel with the specified intensity value.
            </summary>
            <param name="intensity">The intensity of the pixel.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.Equals(TiffLibrary.PixelFormats.TiffGray8)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.op_Equality(TiffLibrary.PixelFormats.TiffGray8,TiffLibrary.PixelFormats.TiffGray8)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffGray8.op_Inequality(TiffLibrary.PixelFormats.TiffGray8,TiffLibrary.PixelFormats.TiffGray8)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffMask">
            <summary>
            Pixel type containing a single 8 bit opacity value ranging from 0 to 255.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffMask.Opacity">
            <summary>
            The opacity of the pixel.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.#ctor(System.Byte)">
            <summary>
            Initialize the pixel with the specified opacity value.
            </summary>
            <param name="opacity">The opacity of the pixel.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.Equals(TiffLibrary.PixelFormats.TiffMask)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.op_Equality(TiffLibrary.PixelFormats.TiffMask,TiffLibrary.PixelFormats.TiffMask)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffMask.op_Inequality(TiffLibrary.PixelFormats.TiffMask,TiffLibrary.PixelFormats.TiffMask)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffRgb24">
            <summary>
            Pixel type containing three 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in red, green, blue order (least significant to most significant byte).
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgb24.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgb24.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgb24.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the pixel with the specified red, green and blue values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.Equals(TiffLibrary.PixelFormats.TiffRgb24)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.op_Equality(TiffLibrary.PixelFormats.TiffRgb24,TiffLibrary.PixelFormats.TiffRgb24)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgb24.op_Inequality(TiffLibrary.PixelFormats.TiffRgb24,TiffLibrary.PixelFormats.TiffRgb24)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffRgba32">
            <summary>
            Pixel type containing three 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in red, green, blue, alpha order (least significant to most significant byte).
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba32.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba32.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba32.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba32.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize the pixel with the specified red, green, blue and alpha values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.Equals(TiffLibrary.PixelFormats.TiffRgba32)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.op_Equality(TiffLibrary.PixelFormats.TiffRgba32,TiffLibrary.PixelFormats.TiffRgba32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba32.op_Inequality(TiffLibrary.PixelFormats.TiffRgba32,TiffLibrary.PixelFormats.TiffRgba32)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.PixelFormats.TiffRgba64">
            <summary>
            Pixel type containing four 16-bit unsigned normalized values ranging from 0 to 65535.
            The color components are stored in red, green, blue, alpha order (least significant to most significant byte).
            Each component is stored in machine-endian.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba64.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba64.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba64.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:TiffLibrary.PixelFormats.TiffRgba64.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initialize the pixel with the specified blue, green, red and alpha values.
            </summary>
            <param name="b">The blue component.</param>
            <param name="g">The green component.</param>
            <param name="r">The red component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.Equals(TiffLibrary.PixelFormats.TiffRgba64)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified objects</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.GetHashCode">
            <summary>
            Gets a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.op_Equality(TiffLibrary.PixelFormats.TiffRgba64,TiffLibrary.PixelFormats.TiffRgba64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.PixelFormats.TiffRgba64.op_Inequality(TiffLibrary.PixelFormats.TiffRgba64,TiffLibrary.PixelFormats.TiffRgba64)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="T:TiffLibrary.TiffFieldReader">
            <summary>
            A reader class to read field value from IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Byte},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.SByte},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadASCIIFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadASCIIFieldFirstStringAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read the first string value of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the string is read and return the read string.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt16},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int16},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt64},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int64},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Single},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Double},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffRational},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffSRational},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDFieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffStreamOffset},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8FieldAsync(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffStreamOffset},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values are read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Byte},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSByteField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.SByte},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadASCIIField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadASCIIFieldFirstString(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read the first string value of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The first string int the IFD.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt16},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSShortField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int16},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt32},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLongField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int32},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.UInt64},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSLong8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Int64},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadFloatField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Single},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Float"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadDoubleField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{System.Double},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Double"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffRational},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadSRationalField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffSRational},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDField(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFDField(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffStreamOffset},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFieldReader.ReadIFD8Field(TiffLibrary.TiffImageFileDirectoryEntry,System.Int32,System.Memory{TiffLibrary.TiffStreamOffset},System.Boolean)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified IFD entry.
            </summary>
            <param name="entry">The IFD entry.</param>
            <param name="offset">The number of elements to skip reading.</param>
            <param name="destination">The destination buffer to store the values.</param>
            <param name="skipTypeValidation">Set to true to skip validation of the type field.</param>
            <returns>The values read.</returns>
        </member>
        <member name="T:TiffLibrary.TiffFileContentReader">
            <summary>
            Provides methods to read bytes from TIFF file source.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.Read(TiffLibrary.TiffStreamOffset,System.ArraySegment{System.Byte})">
            <summary>
            Read bytes from TIFF file source.
            </summary>
            <param name="offset">The offset in the file.</param>
            <param name="buffer">The buffer to hold bytes.</param>
            <returns>The count of bytes read from file.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.Read(TiffLibrary.TiffStreamOffset,System.Memory{System.Byte})">
            <summary>
            Read bytes from TIFF file source.
            </summary>
            <param name="offset">The offset in the file.</param>
            <param name="buffer">The buffer to hold bytes.</param>
            <returns>The count of bytes read from file.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.ReadAsync(TiffLibrary.TiffStreamOffset,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read bytes from TIFF file source.
            </summary>
            <param name="offset">The offset in the file.</param>
            <param name="buffer">The buffer to hold bytes.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires when the users has requested to stop the IO process.</param>
            <returns>The count of bytes read from file.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.ReadAsync(TiffLibrary.TiffStreamOffset,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read bytes from TIFF file source.
            </summary>
            <param name="offset">The offset in the file.</param>
            <param name="buffer">The buffer to hold bytes.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires when the users has requested to stop the IO process.</param>
            <returns>The count of bytes read from file.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.Dispose(System.Boolean)">
            <summary>
            Dispose this instance.
            </summary>
            <param name="disposing">Whether to dispose managed resources.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReader.Dispose">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffFileContentReaderWriter">
            <summary>
            Provides methods to read bytes from TIFF file and write bytes into TIFF file stream.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.Write(TiffLibrary.TiffStreamOffset,System.ArraySegment{System.Byte})">
            <summary>
            Write bytes into TIFF file stream.
            </summary>
            <param name="offset">The offset in the stream.</param>
            <param name="buffer">The buffer to write.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.Write(TiffLibrary.TiffStreamOffset,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Write bytes into TIFF file stream.
            </summary>
            <param name="offset">The offset in the stream.</param>
            <param name="buffer">The buffer to write.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.WriteAsync(TiffLibrary.TiffStreamOffset,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write bytes into TIFF file stream.
            </summary>
            <param name="offset">The offset in the stream.</param>
            <param name="buffer">The buffer to write.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires when the users has requested to stop the IO process.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.Flush">
            <summary>
            Clears all buffers for this writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Clears all buffers for this writer and causes any buffered data to be written to the underlying device.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires when the users has requested to stop the IO process.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileContentReaderWriter.WriteAsync(TiffLibrary.TiffStreamOffset,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write bytes into TIFF file stream.
            </summary>
            <param name="offset">The offset in the stream.</param>
            <param name="buffer">The buffer to write.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires when the users has requested to stop the IO process.</param>
        </member>
        <member name="T:TiffLibrary.ITiffFileContentSource">
            <summary>
            Provides methods to create <see cref="T:TiffLibrary.TiffFileContentReader"/> of TIFF file.
            </summary>
        </member>
        <member name="M:TiffLibrary.ITiffFileContentSource.OpenReader">
            <summary>
            Opens a <see cref="T:TiffLibrary.TiffFileContentReader"/> to read bytes from TIFF file source.
            </summary>
            <returns>A instance of <see cref="T:TiffLibrary.TiffFileContentReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.ITiffFileContentSource.OpenReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Opens a <see cref="T:TiffLibrary.TiffFileContentReader"/> to read bytes from TIFF file source.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A instance of <see cref="T:TiffLibrary.TiffFileContentReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.ITiffFileContentSource.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="T:TiffLibrary.TiffFileContentSource">
            <summary>
            The base class for opening <see cref="T:TiffLibrary.TiffFileContentReader"/> of specified TIFF file.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.OpenReader">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.OpenReaderAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Create(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:TiffLibrary.TiffFileContentSource"/> instance from the specified TIFF file name.
            </summary>
            <param name="fileName">The file name of the TIFF file.</param>
            <param name="preferAsync">Whether asynchronous APIs should be preferred.</param>
            <returns>A <see cref="T:TiffLibrary.TiffFileContentSource"/> that provides bytes from the <see cref="T:System.IO.FileStream"/> of this file.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Create(System.IO.Stream,System.Boolean)">
            <summary>
            Wraps <paramref name="stream"/> as <see cref="T:TiffLibrary.TiffFileContentSource"/>. <see cref="T:TiffLibrary.TiffFileReader"/> created from this instance must not be accessed concurrently.
            </summary>
            <param name="stream">The stream to wrap.</param>
            <param name="leaveOpen">True to dispose the stream when <see cref="T:TiffLibrary.TiffFileContentSource"/> instance is disposed; otherwise, false.</param>
            <returns>A <see cref="T:TiffLibrary.TiffFileContentSource"/> that provides bytes from the <see cref="T:System.IO.Stream"/> instance specified.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Create(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Create a <see cref="T:TiffLibrary.TiffFileContentSource"/> instance from the specified buffer.
            </summary>
            <param name="memory">The buffer of the TIFF file.</param>
            <returns>A <see cref="T:TiffLibrary.TiffFileContentSource"/> that provides bytes from the buffer.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Create(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:TiffLibrary.TiffFileContentSource"/> instance from the specified buffer.
            </summary>
            <param name="buffer">The buffer of the TIFF file.</param>
            <param name="offset">The offset of the buffer.</param>
            <param name="count">The number of bytes in the buffer.</param>
            <returns>A <see cref="T:TiffLibrary.TiffFileContentSource"/> that provides bytes from the buffer.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Create(System.IO.MemoryMappedFiles.MemoryMappedFile,System.Boolean)">
            <summary>
            Wraps <paramref name="memoryMappedFile"/> as <see cref="T:TiffLibrary.TiffFileContentSource"/>.
            </summary>
            <param name="memoryMappedFile">The memory-mapped file to wrap.</param>
            <param name="leaveOpen">True to dispose the memory-mapped file when <see cref="T:TiffLibrary.TiffFileContentSource"/> instance is disposed; otherwise, false.</param>
            <returns>A <see cref="T:TiffLibrary.TiffFileContentSource"/> that provides bytes from the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile"/> instance specified.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileContentSource.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffFileHeader">
            <summary>
            The TIFF file header.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.ByteOrderFlag">
            <summary>
            The byte order used within the file. Legal values are:
            “II” (4949.H)
            “MM” (4D4D.H)
            In the “II” format, byte order is always from the least significant byte to the most significant byte, for both 16-bit and 32-bit integers This is called little-endian byte order. In the “MM” format, byte order is always from most significant to least significant, for both 16-bit and 32-bit integers. This is called big-endian byte order.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.Version">
            <summary>
            0x002A = standard TIFF, 0x002B = BigTiff
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.ByteSizeOfOffsets">
            <summary>
            BigTiff: 0x0008 bytesize of offsets
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.ImageFileDirectoryOffset">
            <summary>
            The offset (in bytes) of the first IFD. The directory may be at any location in the file after the header but must begin on a word boundary. In particular, an Image File Directory may follow the image data it describes. Readers must follow the pointers wherever they may lead.
            The term byte offset is always used in this document to refer to a location with respect to the beginning of the TIFF file. The first byte of the file has an offset of 0.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.IsBigTiff">
            <summary>
            Whether this file is BigTIFF
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileHeader.IsLittleEndian">
            <summary>
            Whether this file is little endian.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileHeader.#ctor(System.Int16,System.Int32)">
            <summary>
            Construct a ImageFileHeader.
            </summary>
            <param name="byteOrderFlag">The ByteOrderFlag.</param>
            <param name="imageFileDirectoryOffset">The first IFD offset.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileHeader.#ctor(System.Int16,System.Int16,System.Int16,System.Int64)">
            <summary>
            Construct a ImageFileHeader.
            </summary>
            <param name="byteOrderFlag">The ByteOrderFlag.</param>
            <param name="version">The version field.</param>
            <param name="byteSizeOfOffsets">The ByteSizeOfOffsets field.</param>
            <param name="imageFileDirectoryOffset">The first IFD offset.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileHeader.TryParse(System.ReadOnlySpan{System.Byte},TiffLibrary.TiffFileHeader@)">
            <summary>
            Try to parse TIFF file header from the specified buffer.
            </summary>
            <param name="data">The buffer to use.</param>
            <param name="header">The parsed TIFF file header.</param>
            <returns>True if the TIFF file header is successfully parsed. Otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileHeader.Write(System.Span{System.Byte},System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Writes the TIFF file header to the specified buffer.
            </summary>
            <param name="destination">The buffer to write to.</param>
            <param name="imageFileDirectoryOffset">The fist IFD offset.</param>
            <param name="isLittleEndian">Whether the TIFF file is little endian.</param>
            <param name="useBigTiff">Whether to use BigTIFF format.</param>
        </member>
        <member name="T:TiffLibrary.TiffFileReader">
            <summary>
            A reader class that read content from TIFF stream.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileReader.FirstImageFileDirectoryOffset">
            <summary>
            Gets the offset of the first IFD.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileReader.IsLittleEndian">
            <summary>
            Gets whether this file is little-endian.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileReader.IsStandardTiff">
            <summary>
            Gets whether this file is a standard TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileReader.IsBigTiff">
            <summary>
            Gets whether this file is a BigTIFF file.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.#ctor(TiffLibrary.ITiffFileContentSource,TiffLibrary.TiffOperationContext)">
            <summary>
            Initialize the instance with the specified <see cref="T:TiffLibrary.ITiffFileContentSource"/> and parameters.
            </summary>
            <param name="contentSource">The TIFF content source.</param>
            <param name="operationContext">Parameters of how the TIFF file should be parsed.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a TIFF file and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="fileName">The TIFF file.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the TIFF header is read and returns <see cref="T:TiffLibrary.TiffFileReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Wraps the specified stream and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="stream">The stream to wrap.</param>
            <param name="leaveOpen">Whether the stream should be left open when the <see cref="T:TiffLibrary.TiffFileReader"/> is disposed or we failed to create <see cref="T:TiffLibrary.TiffFileReader"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the TIFF header is read and returns <see cref="T:TiffLibrary.TiffFileReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Opens a TIFF file in memory and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="memory">The in-memory TIFF file.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the TIFF header is read and returns <see cref="T:TiffLibrary.TiffFileReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Opens a TIFF file in memory and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="buffer">The buffer for in-memory TIFF file.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The byte count of the TIFF file.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the TIFF header is read and returns <see cref="T:TiffLibrary.TiffFileReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Open(System.String)">
            <summary>
            Opens a TIFF file and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="fileName">The TIFF file.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Wraps the specified stream and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="stream">The stream to wrap.</param>
            <param name="leaveOpen">Whether the stream should be left open when the <see cref="T:TiffLibrary.TiffFileReader"/> is disposed or we failed to create <see cref="T:TiffLibrary.TiffFileReader"/>.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Open(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Opens a TIFF file in memory and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="memory">The in-memory TIFF file.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Open(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Opens a TIFF file in memory and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="buffer">The buffer for in-memory TIFF file.</param>
            <param name="offset">The offset in the buffer.</param>
            <param name="count">The byte count of the TIFF file.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenMemoryMappedFile(System.String)">
            <summary>
            Opens a TIFF using memory-mapped file and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="fileName">The TIFF file.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenMemoryMappedFile(System.IO.MemoryMappedFiles.MemoryMappedFile,System.Boolean)">
            <summary>
            Wraps the specified memory-mapped file and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="memoryMappedFile">The memory-mapped file to wrap.</param>
            <param name="leaveOpen">Whether the memory-mapped file should be left open when the <see cref="T:TiffLibrary.TiffFileReader"/> is disposed or we failed to create <see cref="T:TiffLibrary.TiffFileReader"/>.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Open(TiffLibrary.ITiffFileContentSource,System.Boolean)">
            <summary>
            Uses the specified stream source and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="contentSource">The content source to use.</param>
            <param name="leaveOpen">Whether the stream source should be left open when the <see cref="T:TiffLibrary.TiffFileReader"/> is disposed or when we failed to create <see cref="T:TiffLibrary.TiffFileReader"/>.</param>
            <returns>The reader instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.OpenAsync(TiffLibrary.ITiffFileContentSource,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Uses the specified stream source and creates <see cref="T:TiffLibrary.TiffFileReader"/>.
            </summary>
            <param name="contentSource">The content source to use.</param>
            <param name="leaveOpen">Whether the stream source should be left open when the <see cref="T:TiffLibrary.TiffFileReader"/> is disposed or when we failed to create <see cref="T:TiffLibrary.TiffFileReader"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the TIFF header is read and returns <see cref="T:TiffLibrary.TiffFileReader"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.ReadImageFileDirectoryAsync(System.Threading.CancellationToken)">
            <summary>
            Read the first IFD.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the IFD is read and returns <see cref="T:TiffLibrary.TiffImageFileDirectory"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.ReadImageFileDirectoryAsync(TiffLibrary.TiffStreamOffset,System.Threading.CancellationToken)">
            <summary>
            Read the IFD from the specified offset.
            </summary>
            <param name="offset">The offset of the IFD.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the IFD is read and returns <see cref="T:TiffLibrary.TiffImageFileDirectory"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.ReadImageFileDirectory">
            <summary>
            Read the first IFD.
            </summary>
            <returns>The <see cref="T:TiffLibrary.TiffImageFileDirectory"/> instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.ReadImageFileDirectory(TiffLibrary.TiffStreamOffset)">
            <summary>
            Read the IFD from the specified offset.
            </summary>
            <param name="offset">The offset of the IFD.</param>
            <returns>The <see cref="T:TiffLibrary.TiffImageFileDirectory"/> instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateContentReader">
            <summary>
            Createa a <see cref="T:TiffLibrary.TiffFileContentReader"/> to read bytes from TIFF file source.
            </summary>
            <returns>The <see cref="T:TiffLibrary.TiffFileContentReader"/> instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateContentReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Createa a <see cref="T:TiffLibrary.TiffFileContentReader"/> to read bytes from TIFF file source.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>The <see cref="T:TiffLibrary.TiffFileContentReader"/> instance.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateFieldReader">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffFieldReader"/> to read field values. A new stream will be created from stream source if possible.
            </summary>
            <returns>The field reader.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateFieldReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffFieldReader"/> to read field values. A new stream will be created from stream source if possible.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that is preserved and used by the <see cref="T:TiffLibrary.TiffFieldReader"/> created. Cancel the token will cause the field reader to stop the on-going reading tasks and turns the field reader into an unusable state.</param>
            <returns>The field reader.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the first IFD with the default decoding options.
            </summary>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder(TiffLibrary.TiffImageDecoderOptions)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the first IFD with the default decoding options.
            </summary>
            <param name="options">The options to use when decoding image.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder(TiffLibrary.TiffStreamOffset)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifdOffset">The offset to the IFD.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffImageDecoderOptions)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifdOffset">The offset to the IFD.</param>
            <param name="options">The options to use when decoding image.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder(TiffLibrary.TiffImageFileDirectory)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifd">The ifd to decode.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoder(TiffLibrary.TiffImageFileDirectory,TiffLibrary.TiffImageDecoderOptions)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD.
            </summary>
            <param name="ifd">The ifd to decode.</param>
            <param name="options">The options to use when decoding image.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the the first IFD with the default decoding options.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(TiffLibrary.TiffImageDecoderOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the first IFD with the default decoding options.
            </summary>
            <param name="options">The options to use when decoding image.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(TiffLibrary.TiffStreamOffset,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifdOffset">The offset to the IFD.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffImageDecoderOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifdOffset">The offset to the IFD.</param>
            <param name="options">The options to use when decoding image.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(TiffLibrary.TiffImageFileDirectory,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD with the default decoding options.
            </summary>
            <param name="ifd">The ifd to decode.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.CreateImageDecoderAsync(TiffLibrary.TiffImageFileDirectory,TiffLibrary.TiffImageDecoderOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageDecoder"/> for the specified IFD.
            </summary>
            <param name="ifd">The ifd to decode.</param>
            <param name="options">The options to use when decoding image.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that fires if the user wants to stop the initialization process of <see cref="T:TiffLibrary.TiffImageDecoder"/>.</param>
            <returns>An image decoder.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileReader.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileReader.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffFileWriter">
            <summary>
            A writer class that write content into the TIFF steam.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileWriter.UseBigTiff">
            <summary>
            Gets whether to use BigTIFF format.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffFileWriter.Position">
            <summary>
            The current position of the stream.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.OpenAsync(System.IO.Stream,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Uses the specified stream to create <see cref="T:TiffLibrary.TiffFileWriter"/>.
            </summary>
            <param name="stream">A seekable and writable stream to use.</param>
            <param name="leaveOpen">Whether to leave the stream open when <see cref="T:TiffLibrary.TiffFileWriter"/> is dispsoed.</param>
            <param name="useBigTiff">Whether to use BigTIFF format.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>The create <see cref="T:TiffLibrary.TiffFileWriter"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.OpenAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Opens the specified file for writing and creates <see cref="T:TiffLibrary.TiffFileWriter"/>.
            </summary>
            <param name="fileName">The file to write to.</param>
            <param name="useBigTiff">Whether to use BigTIFF format.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>The create <see cref="T:TiffLibrary.TiffFileWriter"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.OpenAsync(TiffLibrary.TiffFileContentReaderWriter,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Uses the specified content writer to create <see cref="T:TiffLibrary.TiffFileWriter"/>.
            </summary>
            <param name="writer">The content writer to use.</param>
            <param name="leaveOpen">Whether to leave the content writer open when <see cref="T:TiffLibrary.TiffFileWriter"/> is dispsoed.</param>
            <param name="useBigTiff">Whether to use BigTIFF format.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>The create <see cref="T:TiffLibrary.TiffFileWriter"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.AlignToWordBoundaryAsync(System.Threading.CancellationToken)">
            <summary>
            Align the current position to word boundary.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the align operation is completed. Returns the current position.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.Seek(TiffLibrary.TiffStreamOffset)">
            <summary>
            Seek to the specified position.
            </summary>
            <param name="position">The specified position in the stream.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.SetFirstImageFileDirectoryOffset(TiffLibrary.TiffStreamOffset)">
            <summary>
            Sets the first IFD offset to the specified offset.
            </summary>
            <param name="ifdOffset">The offset of the first IFD.</param>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.CreateImageFileDirectory">
            <summary>
            Creates a <see cref="T:TiffLibrary.TiffImageFileDirectoryEntry"/> for writing a new IFD.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteBytesAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteBytesAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="index">The number of bytes to skip in the buffer.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteBytesAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteAlignedBytesAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Align to word boundary and writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteAlignedBytesAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Align to word boundary and writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="index">The number of bytes to skip in the buffer.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteAlignedBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Align to word boundary and writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.WriteAlignedBytesAsync(System.Buffers.ReadOnlySequence{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Align to word boundary and writes a series of bytes into the TIFF stream.
            </summary>
            <param name="buffer">The bytes buffer.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the bytes have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flush the TIFF file header into the stream.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns></returns>
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffFileWriter.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffImageDecoder">
            <summary>
            A decoder class to decode pixels from IFD.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoder.Width">
            <summary>
            The width of the image of the IFD.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoder.Height">
            <summary>
            The height of the image of the IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoder.Decode``1(TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoder.DecodeAsync``1(TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="T:TiffLibrary.TiffImageDecoderExtensions">
            <summary>
            Provides extension methods for <see cref="T:TiffLibrary.TiffImageDecoder"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.ITiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.DecodeAsync``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferWriter{``0},System.Threading.CancellationToken)">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the decoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image has been decoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.ITiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBuffer{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="buffer">The pixel buffer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.TiffPoint,TiffLibrary.TiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="destinationOffset">Number of columns and rows to skip in the destination writer.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageDecoderExtensions.Decode``1(TiffLibrary.TiffImageDecoder,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferWriter{``0})">
            <summary>
            Decode the image into the specified pixel buffer writer.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="decoder">The image decoder.</param>
            <param name="offset">Number of columns and rows to skip in the source image.</param>
            <param name="readSize">Number of columns and rows to read from the source image.</param>
            <param name="writer">The pixel buffer writer to write pixels into.</param>
        </member>
        <member name="T:TiffLibrary.TiffImageDecoderOptions">
            <summary>
            A series of options to control the behavior of <see cref="T:TiffLibrary.TiffImageDecoder"/>.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoderOptions.MemoryPool">
            <summary>
            The memory pool to use when allocating large chunk of memory.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoderOptions.PixelConverterFactory">
            <summary>
            An <see cref="T:TiffLibrary.PixelConverter.ITiffPixelConverterFactory"/> instance used to create pixel converters to convert pixels in one color space to another.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoderOptions.UndoColorPreMultiplying">
            <summary>
            When this flag is set, the decoder will utilize the associated alpha channel in RGB image if possible and undo color pre-multiplying to restore alpha chanel in the output RGBA image. Otherwise the associated alpha channel is ignored.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoderOptions.IgnoreOrientation">
            <summary>
            When this flag is set, the Orientation tag in the IFD is ignored. Image will not be flipped or oriented according to the tag.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageDecoderOptions.MaxDegreeOfParallelism">
            <summary>
            Gets or sets the maximum number of concurrent decoding pipelines enabled by this <see cref="T:TiffLibrary.TiffImageDecoderOptions"/> instance.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffImageEncoder`1">
            <summary>
            An encoder class to encode pixel data into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoder`1.EncodeAsync(TiffLibrary.TiffFileWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferReader{`0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD tag fields.
            </summary>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> object to write encoded image data to.</param>
            <param name="offset">The number of columns and rows to skip in <paramref name="reader"/>.</param>
            <param name="size">The number of columns and rows to encode in <paramref name="reader"/>.</param>
            <param name="reader">The pixel buffer reader object.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoder`1.EncodeAsync(TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBufferReader{`0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated tag fields into TIFF stream.
            </summary>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="offset">The number of columns and rows to skip in <paramref name="reader"/>.</param>
            <param name="size">The number of columns and rows to encode in <paramref name="reader"/>.</param>
            <param name="reader">The pixel buffer reader.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.TiffImageEncoderExtensions">
            <summary>
            Provides extension methods for <see cref="T:TiffLibrary.TiffImageEncoder`1"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffFileWriter,TiffLibrary.ITiffPixelBufferReader{``0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD fields.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> instance of the output TIFF file.</param>
            <param name="reader">The pixel buffer reader object.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.ITiffPixelBufferReader{``0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated IFD fields into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="reader">The pixel buffer reader object.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffFileWriter,TiffLibrary.TiffPixelBufferReader{``0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD fields.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> instance of the output TIFF file.</param>
            <param name="reader">The pixel buffer reader object.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.TiffPixelBufferReader{``0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated IFD fields into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="reader">The pixel buffer reader object.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffFileWriter,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD fields.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> instance of the output TIFF file.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.TiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated IFD fields into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffFileWriter,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD fields.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> instance of the output TIFF file.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated IFD fields into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffFileWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode a single image without writing any IFD fields.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffFileWriter"/> instance of the output TIFF file.</param>
            <param name="offset">The number of columns and rows to skip in <paramref name="buffer"/>.</param>
            <param name="size">The number of columns and rows to encode in <paramref name="buffer"/>.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes and return the position and length written into the stream when the image has been encoded.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageEncoderExtensions.EncodeAsync``1(TiffLibrary.TiffImageEncoder{``0},TiffLibrary.TiffImageFileDirectoryWriter,TiffLibrary.TiffPoint,TiffLibrary.TiffSize,TiffLibrary.ITiffPixelBuffer{``0},System.Threading.CancellationToken)">
            <summary>
            Encode an image as well as associated IFD fields into TIFF stream.
            </summary>
            <typeparam name="TPixel">The pixel type.</typeparam>
            <param name="encoder">The image encoder.</param>
            <param name="writer">The <see cref="T:TiffLibrary.TiffImageFileDirectoryWriter"/> object to write encoded image data and fields to.</param>
            <param name="offset">The number of columns and rows to skip in <paramref name="buffer"/>.</param>
            <param name="size">The number of columns and rows to encode in <paramref name="buffer"/>.</param>
            <param name="buffer">The pixel buffer </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort the encoding pipeline.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the image and fields have been encoded.</returns>
        </member>
        <member name="T:TiffLibrary.TiffImageFileDirectory">
            <summary>
            A image file directory in the TIFF file.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectory.NextOffset">
            <summary>
            The offset of the next IFD.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectory.Item(System.Int32)">
            <summary>
            The the IFD entry of the specified index.
            </summary>
            <param name="index">The IFD entry index.</param>
            <returns>The IFD Entry</returns>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectory.Count">
            <summary>
            The number of entries in this IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectory.GetEnumerator">
            <summary>
            Gets a enumerator of IFD entries.
            </summary>
            <returns>A enumerator of IFD entries.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectory.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a enumerator of IFD entries.
            </summary>
            <returns>A enumerator of IFD entries.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectory.Contains(TiffLibrary.TiffTag)">
            <summary>
            Check whether entries of this IFD contains the specified tag.
            </summary>
            <param name="tag">The specified tag.</param>
            <returns>True is entries of this IFD contains the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectory.FindEntry(TiffLibrary.TiffTag)">
            <summary>
            Find the entry of the specified tag in the entries.
            </summary>
            <param name="tag">The specified tag.</param>
            <returns>The entry of the specified tag. Returns default(TiffImageFileDirectoryEntry) is the entry is not found.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectory.FindEntry(System.Func{TiffLibrary.TiffImageFileDirectoryEntry,System.Boolean})">
            <summary>
            Find the first entry that satisfied the specified delegate.
            </summary>
            <param name="predicate">A delegate to check the each entry.</param>
            <returns>The entry found. Returns default(TiffImageFileDirectoryEntry) is the entry is not found.</returns>
        </member>
        <member name="T:TiffLibrary.TiffImageFileDirectoryEntry">
            <summary>
            IFD Entry
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectoryEntry.Tag">
            <summary>
            The Tag that identifies the field.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectoryEntry.Type">
            <summary>
            The field Type.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectoryEntry.ValueCount">
            <summary>
            The number of values, Count of the indicated Type.
            Count—called Length in previous versions of the specification—is the number of values. Note that Count is not the total number of bytes. For example, a single 16bit word (SHORT) has a Count of 1; not 2.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectoryEntry.ValueOffset">
            <summary>
            The Value Offset, the file offset (in bytes) of the Value for the field. The Value is expected to begin on a word boundary; the corresponding Value Offset will thus be an even number. This file offset may point anywhere in the file, even after the image data.
            To save time and space the Value Offset contains the Value instead of pointing to the Value if and only if the Value fits into 4 bytes. If the Value is shorter than 4 bytes, it is left-justified within the 4-byte Value Offset, i.e., stored in the lowernumbered bytes. Whether the Value fits within 4 bytes is determined by the Type and Count of the field.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.#ctor(TiffLibrary.TiffTag,TiffLibrary.TiffFieldType,System.Int64,System.Int64)">
            <summary>
            Construct a TiffImageFileDirectoryEntry.
            </summary>
            <param name="tag">The tag of the IFD entry.</param>
            <param name="type">The field type of the values.</param>
            <param name="valueCount">The number of elements.</param>
            <param name="valueOffset">The offset in the TIFF stream.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.TryDetermineValueLength(System.Int64@)">
            <summary>
            Try to determine the total byte count of the values.
            </summary>
            <param name="bytesLength"></param>
            <returns></returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.RestoreRawOffsetBytes(TiffLibrary.TiffOperationContext,System.Span{System.Byte})">
            <summary>
            Restore the ValueOffset field into original bytes in the TIFF stream.
            </summary>
            <param name="context">Parameters of how the TIFF file should be parsed.</param>
            <param name="destination">The destination buffer.</param>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.Equals(TiffLibrary.TiffImageFileDirectoryEntry)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.op_Equality(TiffLibrary.TiffImageFileDirectoryEntry@,TiffLibrary.TiffImageFileDirectoryEntry@)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.op_Inequality(TiffLibrary.TiffImageFileDirectoryEntry@,TiffLibrary.TiffImageFileDirectoryEntry@)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryEntry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffImageFileDirectoryWriter">
            <summary>
            A writer class that write IFD entries into TIFF stream.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffImageFileDirectoryWriter.FileWriter">
            <summary>
            Gets the TIFF file writer.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Writes the IFD into the TIFF stream.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>The offset of the IFD in the stream.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.FlushAsync(TiffLibrary.TiffStreamOffset,System.Threading.CancellationToken)">
            <summary>
            Writes the IFD into the TIFF stream. Update the specified IFD to point its "Next IFD Offset" field to the IFD just written.
            </summary>
            <param name="previousIfdOffset">The specified IFD to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>The offset of the IFD in the stream.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffFieldType,System.Int32,TiffLibrary.TiffValueCollection{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write values of the specified type to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="type">The specified type.</param>
            <param name="valueCount">The value count.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Byte"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffFieldType,TiffLibrary.TiffValueCollection{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Write values of the specified type to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="type">The specified type.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Short"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.SShort"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Long"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.SLong"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Long8"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Single},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Float"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{System.Double},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Double"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{TiffLibrary.TiffRational},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.Rational"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="M:TiffLibrary.TiffImageFileDirectoryWriter.WriteTagAsync(TiffLibrary.TiffTag,TiffLibrary.TiffValueCollection{TiffLibrary.TiffSRational},System.Threading.CancellationToken)">
            <summary>
            Write values of <see cref="F:TiffLibrary.TiffFieldType.SRational"/> to the specified tag in this IFD.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="values">The values to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user has requested to abort this operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that completes when the values have been written.</returns>
        </member>
        <member name="T:TiffLibrary.TiffMemoryPixelBuffer`1">
            <summary>
            A 2-dimensional region of pixels in a contiguous memory buffer in row-major order.
            </summary>
            <typeparam name="TPixel"></typeparam>
        </member>
        <member name="M:TiffLibrary.TiffMemoryPixelBuffer`1.#ctor(System.ReadOnlyMemory{`0},System.Int32,System.Int32)">
            <summary>
            Initialize the region with the specified <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
        </member>
        <member name="M:TiffLibrary.TiffMemoryPixelBuffer`1.#ctor(System.Memory{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initialize the region with the specified <see cref="T:System.Memory`1"/>.
            </summary>
            <param name="buffer">The memory buffer.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="writable">Whether this pixel buffer is writable.</param>
        </member>
        <member name="P:TiffLibrary.TiffMemoryPixelBuffer`1.Width">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffMemoryPixelBuffer`1.Height">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffMemoryPixelBuffer`1.GetSpan">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffMemoryPixelBuffer`1.GetReadOnlySpan">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffOperationContext">
            <summary>
            Parameters of how the TIFF file should be parsed.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffOperationContext.IsLittleEndian">
            <summary>
            Gets or sets whether the TIFF file is little-endian.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffOperationContext.ByteCountOfImageFileDirectoryCountField">
            <summary>
            Gets or sets the byte count of the IFD count field.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffOperationContext.ByteCountOfValueOffsetField">
            <summary>
            Gets or sets the byte count of the "Value Offset" field in the IFD entry.
            </summary>
        </member>
        <member name="T:TiffLibrary.TiffPageNumber">
            <summary>
            Contains page number of a page in the TIFF as well as the total page count.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffPageNumber.PageNumber">
            <summary>
            Gets the page number of the current page.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffPageNumber.TotalPages">
            <summary>
            Gets the total page count.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initialize the object with the specified page number and total page count.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="totalPages">Total page count.</param>
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.Equals(TiffLibrary.TiffPageNumber)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.op_Equality(TiffLibrary.TiffPageNumber,TiffLibrary.TiffPageNumber)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.op_Inequality(TiffLibrary.TiffPageNumber,TiffLibrary.TiffPageNumber)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPageNumber.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffPoint">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:TiffLibrary.TiffPoint.X">
            <summary>
            Gets the horizontal position of the point.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffPoint.Y">
            <summary>
            Gets the vertical position of the point.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffPoint.Equals(TiffLibrary.TiffPoint)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPoint.op_Equality(TiffLibrary.TiffPoint,TiffLibrary.TiffPoint)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPoint.op_Inequality(TiffLibrary.TiffPoint,TiffLibrary.TiffPoint)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffPoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffPoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffRational">
            <summary>
            Represents a unsigned rational.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffRational.Numerator">
            <summary>
            The numerator of the rational.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffRational.Denominator">
            <summary>
            The denominator of the rational.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffRational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a rational value with the specified numerator and denominator.
            </summary>
            <param name="numerator">The numerator of the rational.</param>
            <param name="denominator">The denominator of the rational.</param>
        </member>
        <member name="M:TiffLibrary.TiffRational.ToSingle">
            <summary>
            Converts the rational value to <see cref="T:System.Single"/>.
            </summary>
            <returns>The rational value in <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.ToDouble">
            <summary>
            Converts the rational value to <see cref="T:System.Double"/>.
            </summary>
            <returns>The rational value in <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.Equals(TiffLibrary.TiffRational)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffRational.Equals(TiffLibrary.TiffSRational)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffRational.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffRational.op_Equality(TiffLibrary.TiffRational,TiffLibrary.TiffRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.op_Inequality(TiffLibrary.TiffRational,TiffLibrary.TiffRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.op_Equality(TiffLibrary.TiffRational,TiffLibrary.TiffSRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.op_Inequality(TiffLibrary.TiffRational,TiffLibrary.TiffSRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffRational.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffRational.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffSize">
            <summary>
            A structure representing the size of a rectangle region, containing a width and a height field.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the instance with the specified width and height.
            </summary>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
        </member>
        <member name="P:TiffLibrary.TiffSize.Width">
            <summary>
            Gets the width of the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffSize.Height">
            <summary>
            Gets the height of the region.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffSize.IsAreaEmpty">
            <summary>
            Is true if either Width or Height is zero.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffSize.Equals(TiffLibrary.TiffSize)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSize.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSize.op_Equality(TiffLibrary.TiffSize,TiffLibrary.TiffSize)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSize.op_Inequality(TiffLibrary.TiffSize,TiffLibrary.TiffSize)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSize.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSize.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffSRational">
            <summary>
            Represents a signed rational.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffSRational.Numerator">
            <summary>
            The numerator of the rational.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffSRational.Denominator">
            <summary>
            The denominator of the rational.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffSRational.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a rational value with the specified numerator and denominator.
            </summary>
            <param name="numerator">The numerator of the rational.</param>
            <param name="denominator">The denominator of the rational.</param>
        </member>
        <member name="M:TiffLibrary.TiffSRational.ToSingle">
            <summary>
            Converts the rational value to <see cref="T:System.Single"/>.
            </summary>
            <returns>The rational value in <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.ToDouble">
            <summary>
            Converts the rational value to <see cref="T:System.Double"/>.
            </summary>
            <returns>The rational value in <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.Equals(TiffLibrary.TiffSRational)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSRational.Equals(TiffLibrary.TiffRational)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSRational.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSRational.op_Equality(TiffLibrary.TiffSRational,TiffLibrary.TiffSRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.op_Inequality(TiffLibrary.TiffSRational,TiffLibrary.TiffSRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.op_Equality(TiffLibrary.TiffSRational,TiffLibrary.TiffRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.op_Inequality(TiffLibrary.TiffSRational,TiffLibrary.TiffRational)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffSRational.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffSRational.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffStreamOffset">
            <summary>
            A value representing the offset from the begining of the TIFF file stream.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffStreamOffset.Offset">
            <summary>
            Gets the offset as <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.#ctor(System.Int64)">
            <summary>
            Initial <see cref="T:TiffLibrary.TiffStreamOffset"/> with the specified offset.
            </summary>
            <param name="offset">The offset from the begining of the TIFF file stream.</param>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.#ctor(System.Int32)">
            <summary>
            Initial <see cref="T:TiffLibrary.TiffStreamOffset"/> with the specified offset.
            </summary>
            <param name="offset">The offset from the begining of the TIFF file stream.</param>
        </member>
        <member name="P:TiffLibrary.TiffStreamOffset.IsZero">
            <summary>
            Gets whether the offset is zero or not set.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.Equals(TiffLibrary.TiffStreamOffset)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.CompareTo(TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares this instance to another offset and returns an indication of their relative values.
            </summary>
            <param name="other">An offset to compare.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_Equality(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_Inequality(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_GreaterThan(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is greater than the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_LessThan(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is less than the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_GreaterThanOrEqual(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not less than the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_LessThanOrEqual(TiffLibrary.TiffStreamOffset,TiffLibrary.TiffStreamOffset)">
            <summary>
            Compares two objects.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not greater than the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.ToString">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_Implicit(TiffLibrary.TiffStreamOffset)~System.Int64">
            <summary>
            Converts the offset into <see cref="T:System.Int64"/>.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.op_Implicit(System.Int64)~TiffLibrary.TiffStreamOffset">
            <summary>
            Converts a <see cref="T:System.Int64"/> into <see cref="T:TiffLibrary.TiffStreamOffset"/>.
            </summary>
            <param name="offset">The offset from the begining of the TIFF file stream.</param>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.ToInt64">
            <summary>
            Converts the offset into <see cref="T:System.Int64"/>.
            </summary>
            <returns>The integer representing the offset.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamOffset.FromInt64(System.Int64)">
            <summary>
            Converts a <see cref="T:System.Int64"/> into <see cref="T:TiffLibrary.TiffStreamOffset"/>.
            </summary>
            <param name="offset">The offset from the begining of the TIFF file stream.</param>
            <returns>The created <see cref="T:TiffLibrary.TiffStreamOffset"/>.</returns>
        </member>
        <member name="T:TiffLibrary.TiffStreamRegion">
            <summary>
            Represents a region in the TIFF file stream.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffStreamRegion.Offset">
            <summary>
            Gets the start position of the region in the stream.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffStreamRegion.Length">
            <summary>
            Gets the length of the region.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.#ctor(System.Int64,System.Int32)">
            <summary>
            Initialize the object with the specified offset and length.
            </summary>
            <param name="offset">The start position of the region in the stream.</param>
            <param name="length">The length of the region.</param>
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the object with the specified offset and length.
            </summary>
            <param name="offset">The start position of the region in the stream.</param>
            <param name="length">The length of the region.</param>
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.Equals(TiffLibrary.TiffStreamRegion)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.op_Equality(TiffLibrary.TiffStreamRegion,TiffLibrary.TiffStreamRegion)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.op_Inequality(TiffLibrary.TiffStreamRegion,TiffLibrary.TiffStreamRegion)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The object on the left side of the operand.</param>
            <param name="right">The object on the right side of the operand.</param>
            <returns>True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffStreamRegion.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffTagReader">
            <summary>
            The helper structure to read tag data from IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.#ctor(TiffLibrary.TiffFieldReader,TiffLibrary.TiffImageFileDirectory)">
            <summary>
            Create the <see cref="T:TiffLibrary.TiffTagReader"/> structure with the specified <see cref="T:TiffLibrary.TiffFieldReader"/> and <see cref="T:TiffLibrary.TiffImageFileDirectory"/>.
            </summary>
            <param name="reader">The field reader.</param>
            <param name="imageFileDirectory">The IFD to read.</param>
        </member>
        <member name="P:TiffLibrary.TiffTagReader.Reader">
            <summary>
            Gets the associated field reader instance.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffTagReader.ImageFileDirectory">
            <summary>
            Gets the associated IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadByteFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadByteFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadByteField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadByteField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Byte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSByteFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSByteFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSByteField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSByteField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SByte"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadASCIIFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadASCIIField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadASCIIFieldFirstStringAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read the first string value of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the string value.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadASCIIFieldFirstString(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read the first string value of type <see cref="F:TiffLibrary.TiffFieldType.ASCII"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of bytes to read from the IFD</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadShortFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadShortFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadShortField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadShortField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Short"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSShortFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSShortFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSShortField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSShortField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SShort"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLongFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLongFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLongField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLongField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLongFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLongFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLongField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLongField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLong8FieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLong8FieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLong8Field(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadLong8Field(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Long8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLong8FieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLong8FieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLong8Field(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSLong8Field(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SLong8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadRationalFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadRationalFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadRationalField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadRationalField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.Rational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSRationalFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSRationalFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSRationalField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadSRationalField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.SRational"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFDFieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFDFieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFDField(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFDField(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFD8FieldAsync(TiffLibrary.TiffTag,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFD8FieldAsync(TiffLibrary.TiffTag,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the values are read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFD8Field(TiffLibrary.TiffTag)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReader.ReadIFD8Field(TiffLibrary.TiffTag,System.Int32)">
            <summary>
            Read values of type <see cref="F:TiffLibrary.TiffFieldType.IFD8"/> from the specified tag.
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="sizeLimit">The maximum number of values to read.</param>
            <returns>The values read.</returns>
        </member>
        <member name="T:TiffLibrary.TiffTagReaderExtensions">
            <summary>
            Extension methods to read tag values from IFD.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadArtistAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Artist"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadArtist(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Artist"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadBitsPerSampleAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.BitsPerSample"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadBitsPerSample(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.BitsPerSample"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCellLengthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CellLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCellLength(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CellLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCellWidthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CellWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCellWidth(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CellWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadColorMapAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ColorMap"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadColorMap(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ColorMap"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCompressionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Compression"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCompression(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Compression"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCopyrightAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Copyright"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCopyright(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Copyright"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDateTimeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DateTime"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDateTime(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DateTime"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadExtraSamplesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ExtraSamples"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadExtraSamples(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ExtraSamples"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFillOrderAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FillOrder"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFillOrder(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FillOrder"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFreeByteCountsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FreeByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFreeByteCounts(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FreeByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFreeOffsetsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FreeOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadFreeOffsets(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.FreeOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGrayResponseCurveAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GrayResponseCurve"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGrayResponseCurve(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GrayResponseCurve"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGrayResponseUnitAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GrayResponseUnit"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGrayResponseUnit(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GrayResponseUnit"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadHostComputerAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.HostComputer"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadHostComputer(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.HostComputer"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageDescriptionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageDescription"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageDescription(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageDescription"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageLengthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageLength(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageWidthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadImageWidth(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ImageWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMakeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Make"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMake(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Make"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMaxSampleValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.MaxSampleValue"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMaxSampleValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.MaxSampleValue"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMinSampleValueAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.MinSampleValue"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadMinSampleValue(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.MinSampleValue"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadModelAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Model"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadModel(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Model"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadNewSubfileTypeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.NewSubfileType"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadNewSubfileType(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.NewSubfileType"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadOrientationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Orientation"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadOrientation(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Orientation"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPhotometricInterpretationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PhotometricInterpretation"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPhotometricInterpretation(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PhotometricInterpretation"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPlanarConfigurationAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PlanarConfiguration"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPlanarConfiguration(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PlanarConfiguration"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadResolutionUnitAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ResolutionUnit"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadResolutionUnit(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ResolutionUnit"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadRowsPerStripAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.RowsPerStrip"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadRowsPerStrip(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.RowsPerStrip"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSamplesPerPixelAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SamplesPerPixel"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSamplesPerPixel(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SamplesPerPixel"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSoftwareAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Software"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSoftware(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Software"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadStripByteCountsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.StripByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadStripByteCounts(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.StripByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadStripOffsetsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.StripOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadStripOffsets(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.StripOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSubFileTypeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SubFileType"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSubFileType(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SubFileType"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadThreshholdingAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Threshholding"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadThreshholding(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Threshholding"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXResolutionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XResolution"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXResolution(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XResolution"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYResolutionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YResolution"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYResolution(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YResolution"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadT4OptionsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.T4Options"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadT4Options(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.T4Options"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadT6OptionsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.T6Options"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadT6Options(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.T6Options"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInkSetAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InkSet"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInkSet(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InkSet"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadNumberOfInksAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.NumberOfInks"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadNumberOfInks(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.NumberOfInks"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInkNamesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InkNames"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInkNames(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InkNames"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDotRangeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DotRange"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDotRange(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DotRange"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTargetPrinterAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TargetPrinter"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTargetPrinter(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TargetPrinter"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDocumentNameAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DocumentName"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadDocumentName(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.DocumentName"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPageNameAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PageName"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPageName(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PageName"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPageNumberAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PageNumber"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPageNumber(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PageNumber"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXPositionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XPosition"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXPosition(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XPosition"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYPositionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YPosition"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYPosition(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YPosition"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadExifIfdAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ExifIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadExifIfd(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ExifIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGpsIfdAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GpsIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadGpsIfd(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.GpsIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInteroperabilityIfdAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InteroperabilityIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadInteroperabilityIfd(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.InteroperabilityIfd"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadBadFaxLinesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.BadFaxLines"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadBadFaxLines(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.BadFaxLines"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCleanFaxDataAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CleanFaxData"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadCleanFaxData(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.CleanFaxData"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadConsecutiveBadFaxLinesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ConsecutiveBadFaxLines"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadConsecutiveBadFaxLines(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ConsecutiveBadFaxLines"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadHalftoneHintsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.HalftoneHints"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadHalftoneHints(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.HalftoneHints"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGTablesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGTables(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGProcAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGProc"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGProc(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGProc"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGInterchangeFormatAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGInterchangeFormat"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGInterchangeFormat(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGInterchangeFormat"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGInterchangeFormatLengthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGInterchangeFormatLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGInterchangeFormatLength(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGInterchangeFormatLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGRestartIntervalAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGRestartInterval"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGRestartInterval(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGRestartInterval"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGQTablesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGQTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGQTables(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGQTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGDCTablesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGDCTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGDCTables(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGDCTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGACTablesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGACTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadJPEGACTables(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.JPEGACTables"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSubIFDsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SubIFDs"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadSubIFDs(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.SubIFDs"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadClipPathAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ClipPath"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadClipPath(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ClipPath"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXClipPathUnitsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XClipPathUnits"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadXClipPathUnits(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.XClipPathUnits"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYClipPathUnitsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YClipPathUnits"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYClipPathUnits(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YClipPathUnits"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadIndexedAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Indexed"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadIndexed(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Indexed"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPredictorAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Predictor"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPredictor(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.Predictor"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadWhitePointAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.WhitePoint"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadWhitePoint(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.WhitePoint"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPrimaryChromaticitiesAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PrimaryChromaticities"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadPrimaryChromaticities(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.PrimaryChromaticities"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTransferFunctionAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TransferFunction"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTransferFunction(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TransferFunction"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTransferRangeAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TransferRange"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTransferRange(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TransferRange"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadReferenceBlackWhiteAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ReferenceBlackWhite"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadReferenceBlackWhite(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.ReferenceBlackWhite"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileWidthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileWidth(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileWidth"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileLengthAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileLength(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileLength"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileOffsetsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileOffsets(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileOffsets"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileByteCountsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadTileByteCounts(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.TileByteCounts"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrCoefficientsAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrCoefficients"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrCoefficients(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrCoefficients"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrSubSamplingAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrSubSampling"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrSubSampling(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrSubSampling"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrPositioningAsync(TiffLibrary.TiffTagReader,System.Threading.CancellationToken)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrPositioning"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that fires if the user want to stop the current task.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that completes when the value of the tag is read and return the read values.</returns>
        </member>
        <member name="M:TiffLibrary.TiffTagReaderExtensions.ReadYCbCrPositioning(TiffLibrary.TiffTagReader)">
            <summary>
            Read the values of <see cref="F:TiffLibrary.TiffTag.YCbCrPositioning"/>.
            </summary>
            <param name="tagReader">The tag reader to use.</param>
            <returns>The values read.</returns>
        </member>
        <member name="T:TiffLibrary.TiffValueCollection`1">
            <summary>
            Represents a list of values of specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type in the collection.</typeparam>
        </member>
        <member name="F:TiffLibrary.TiffValueCollection`1.s_empty">
            <summary>
            Gets a empty list.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.#ctor(`0)">
            <summary>
            Create the list with a single element.
            </summary>
            <param name="value">The specified element.</param>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.#ctor(`0[])">
            <summary>
            Creates a list and wraps <paramref name="values"/> as the underlying storage. However, if <paramref name="values"/> has only 1 elements, the element value is copied and the array reference is discarded.
            </summary>
            <param name="values">The array to be used.</param>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Creates a list of enough space and copy all the elements from <paramref name="values"/> to the list.
            </summary>
            <param name="values">The elements to be copied from.</param>
        </member>
        <member name="P:TiffLibrary.TiffValueCollection`1.Item(System.Int32)">
            <summary>
            Gets the element of the specified index.
            </summary>
            <param name="index">A 0-based index.</param>
            <returns>The element value.</returns>
        </member>
        <member name="P:TiffLibrary.TiffValueCollection`1.IsEmpty">
            <summary>
            Gets whether the list is empty.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffValueCollection`1.Count">
            <summary>
            Gets the element count of the list.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.GetFirstOrDefault">
            <summary>
            Gets the value of the first element. If the list is empty, returns the default value of <typeparamref name="T"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TiffLibrary.TiffValueCollection`1.Enumerator">
            <summary>
            The enumerator for <see cref="T:TiffLibrary.TiffValueCollection`1"/>.
            </summary>
        </member>
        <member name="P:TiffLibrary.TiffValueCollection`1.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:TiffLibrary.TiffValueCollection`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.Enumerator.#ctor(TiffLibrary.TiffValueCollection{`0}@)">
            <summary>
            Creates an enumerator for <see cref="T:TiffLibrary.TiffValueCollection`1"/>.
            </summary>
            <param name="values">The <see cref="T:TiffLibrary.TiffValueCollection`1"/> to enumerate over.</param>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.GetEnumerator">
            <summary>
            Gets a enumerator of the list.
            </summary>
            <returns>A enumerator of the list.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets a enumerator of the list.
            </summary>
            <returns>A enumerator of the list.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a enumerator of the list.
            </summary>
            <returns>A enumerator of the list.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:TiffLibrary.TiffValueCollection">
            <summary>
            Helper methods for <see cref="T:TiffLibrary.TiffValueCollection`1"/>.
            </summary>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.UnsafeWrap``1(``0[])">
            <summary>
            Creates a list and use <paramref name="array"/> as the underlying storage. However, if <paramref name="array"/> has only 1 elements, the element value is copied and the array reference is discarded.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The array to be used.</param>
            <returns>The created list.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.Single``1(``0)">
            <summary>
            Create a <see cref="T:TiffLibrary.TiffValueCollection`1"/> that contains a single element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="value">Value of the element.</param>
            <returns>The created <see cref="T:TiffLibrary.TiffValueCollection`1"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.Empty``1">
            <summary>
            Create a <see cref="T:TiffLibrary.TiffValueCollection`1"/> that contains no element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>The created <see cref="T:TiffLibrary.TiffValueCollection`1"/>.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.ToArray``1(TiffLibrary.TiffValueCollection{``0})">
            <summary>
            Create T[] and copy all the elements from <paramref name="values"/> into the array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="values">The element collection to copy from.</param>
            <returns>The created array.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.TryCopyTo``1(TiffLibrary.TiffValueCollection{``0},System.Span{``0})">
            <summary>
            Copy all the elements from <paramref name="values"/> into the destination span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="values">The element collection to copy from.</param>
            <param name="destination">The destination span.</param>
            <returns>True if the destination span is big enough to copy to; otherwise, false.</returns>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.CopyTo``1(TiffLibrary.TiffValueCollection{``0},System.Span{``0})">
            <summary>
            Copy all the elements from <paramref name="values"/> into the destination span.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="values">The element collection to copy from.</param>
            <param name="destination">The destination span.</param>
            <exception cref="T:System.ArgumentException">The destination span is too small.</exception>
        </member>
        <member name="M:TiffLibrary.TiffValueCollection.UnsafeTryGetArray``1(TiffLibrary.TiffValueCollection{``0},``0[]@)">
            <summary>
            Gets the underlying array from the element collection.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="values">The element collection.</param>
            <param name="array">The underlying array if there is one.</param>
            <returns>True if the array is returned; false if there is no array backing the collection.</returns>
        </member>
        <member name="T:TiffLibrary.Utils.TiffLzwEncoder">
            <summary>
            Encodes and compresses the image data using dynamic Lempel-Ziv compression.
            </summary>
            <remarks>
            Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott. K Weiner 12/00
            <para>
            GIFCOMPR.C       - GIF Image compression routines
            </para>
            <para>
            Lempel-Ziv compression based on 'compress'.  GIF modifications by
            David Rowley (mgardi@watdcsu.waterloo.edu)
            </para>
            GIF Image compression - modified 'compress'
            <para>
            Based on: compress.c - File compression ala IEEE Computer, June 1984.
            By Authors:  Spencer W. Thomas      (decvax!harpo!utah-cs!utah-gr!thomas)
                         Jim McKie              (decvax!mcvax!jim)
                         Steve Davies           (decvax!vax135!petsd!peora!srd)
                         Ken Turkowski          (decvax!decwrl!turtlevax!ken)
                         James A. Woods         (decvax!ihnp4!ames!jaw)
                         Joe Orost              (decvax!vax135!petsd!joe)
            </para>
            </remarks>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder.HashSize">
            <summary>
            80% occupancy
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder.Masks">
            <summary>
            Mask used when shifting pixel values
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder.MaxBits">
            <summary>
            The maximum number of bits/code.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder.MaxMaxCode">
            <summary>
            Should NEVER generate this code.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._initialCodeSize">
            <summary>
            The initial code size.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._hashTable">
            <summary>
            The hash table.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._codeTable">
            <summary>
            The code table.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._accumulators">
            <summary>
            Define the storage for the packet accumulator.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._hsize">
            <summary>
            For dynamic table sizing
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._position">
            <summary>
            The current position within the pixelArray.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._bitCount">
            <summary>
            Number of bits/code
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._maxCode">
            <summary>
            maximum code, given bitCount
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._freeEntry">
            <summary>
            First unused entry
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._clearFlag">
            <summary>
            Block compression parameters -- after all codes are used up,
            and compression rate changes, start over.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._globalInitialBits">
            <summary>
            Algorithm:  use open addressing double hashing (no chaining) on the
            prefix code / next character combination.  We do a variant of Knuth's
            algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime
            secondary probe.  Here, the modular division first probe is gives way
            to a faster exclusive-or manipulation.  Also do block compression with
            an adaptive reset, whereby the code table is cleared when the compression
            ratio decreases, but after the table fills.  The variable-length output
            codes are re-sized at this point, and a special CLEAR code is generated
            for the decompressor.  Late addition:  construct the table according to
            file size for noticeable speed improvement on small files.  Please direct
            questions about this implementation to ames!jaw.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._clearCode">
            <summary>
            The clear code.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._eofCode">
            <summary>
            The end-of-file code.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._currentAccumulator">
            <summary>
            Output the given code.
            Inputs:
                 code:   A bitCount-bit integer.  If == -1, then EOF.  This assumes
                         that bitCount =&lt; wordsize - 1.
            Outputs:
                 Outputs code to the file.
            Assumptions:
                 Chars are 8 bits long.
            Algorithm:
                 Maintain a BITS character long buffer (so that 8 codes will
            fit in it exactly).  Use the VAX insv instruction to insert each
            code in turn.  When the buffer fills up empty it and start over.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._currentBits">
            <summary>
            The current bits.
            </summary>
        </member>
        <member name="F:TiffLibrary.Utils.TiffLzwEncoder._accumulatorCount">
            <summary>
            Number of characters so far in this 'packet'
            </summary>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.GetMaxcode(System.Int32)">
            <summary>
            Gets the maximum code value.
            </summary>
            <param name="bitCount">The number of bits</param>
            <returns>See <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.AddCharacter(System.Byte)">
            <summary>
            Add a character to the end of the current packet, and if it is 4096 characters,
            flush the packet to disk.
            </summary>
            <param name="c">The character to add.</param>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.ClearBlock">
            <summary>
            Table clear for block compress.
            </summary>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.ResetCodeTable">
            <summary>
            Reset the code table.
            </summary>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.NextPixel(System.ReadOnlySpan{System.Byte})">
            <summary>
            Reads the next pixel from the image.
            </summary>
            <param name="indexedPixels">The span of indexed pixels.</param>
            <returns>
            The <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.Compress(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Compress the packets to the stream.
            </summary>
            <param name="indexedPixels">The span of indexed pixels.</param>
            <param name="initialBits">The initial bits.</param>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.FlushPacket">
            <summary>
            Flush the packet to disk and reset the accumulator.
            </summary>
        </member>
        <member name="M:TiffLibrary.Utils.TiffLzwEncoder.Output(System.Int32)">
            <summary>
            Output the current code to the stream.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:TiffLibrary.Utils.TiffMathHelper.Log2SoftwareFallback(System.UInt32)">
            <summary>
            Returns the integer (floor) log of the specified value, base 2.
            Note that by convention, input value 0 returns 0 since Log(0) is undefined.
            Does not directly use any hardware intrinsics, nor does it incur branching.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksum.Adler32">
             <summary>
             Computes Adler32 checksum for a stream of data. An Adler32
             checksum is not as reliable as a CRC32 checksum, but a lot faster to
             compute.
            
             The specification for Adler32 may be found in RFC 1950.
             ZLIB Compressed Data Format Specification version 3.3)
            
            
             From that document:
            
                  "ADLER32 (Adler-32 checksum)
                   This contains a checksum value of the uncompressed data
                   (excluding any dictionary data) computed according to Adler-32
                   algorithm. This algorithm is a 32-bit extension and improvement
                   of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                   standard.
            
                   Adler-32 is composed of two sums accumulated per byte: s1 is
                   the sum of all bytes, s2 is the sum of all s1 values. Both sums
                   are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                   Adler-32 checksum is stored as s2*65536 + s1 in most-
                   significant-byte first (network) order."
            
              "8.2. The Adler-32 algorithm
            
                The Adler-32 algorithm is much faster than the CRC32 algorithm yet
                still provides an extremely low probability of undetected errors.
            
                The modulo on unsigned long accumulators can be delayed for 5552
                bytes, so the modulo operation time is negligible.  If the bytes
                are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
                and order sensitive, unlike the first sum, which is just a
                checksum.  That 65521 is prime is important to avoid a possible
                large class of two-byte errors that leave the check unchanged.
                (The Fletcher checksum uses 255, which is not prime and which also
                makes the Fletcher check insensitive to single byte changes 0 -
                255.)
            
                The sum s1 is initialized to 1 instead of zero to make the length
                of the sequence part of s2, so that the length does not have to be
                checked separately. (Any sequence of zeroes has a Fletcher
                checksum of zero.)"
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksum.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksum.Adler32.checkValue">
            <summary>
            The CRC data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksum.Adler32.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksum.Adler32"></see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksum.Adler32.Reset">
            <summary>
            Resets the Adler32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksum.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksum.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksum.Adler32.Update(System.ReadOnlySpan{System.Byte})">
            <summary>
            Update Adler32 data checksum based on a portion of a block of data
            </summary>
            <param name = "span">
            The chunk of data to add
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel">
            <summary>
            Compression Level as an enum for safer use
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.CompressionLevel.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput().
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            Adler calculation will be peformed
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending,System.Boolean)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>
            <param name="noAdlerCalculation">
            If no adler calculation should be performed
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">input</see> is needed.
            </summary>
            <returns>Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + DeflaterConstants.MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
             <summary>
             This is the DeflaterHuffman class.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of Deflate and SetInput.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:System.IO.InvalidDataException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
             <summary>
             This class stores the pending output of the Deflater.
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
            
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream.
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
             <summary>
             Creates a new inflater.
             </summary>
             <param name="noHeader">
             True if no RFC1950/Zlib header and footer fields are expected in the input data
            
             This is used for GZIPed/Zipped input.
            
             For compatibility with
             Sun JDK you should provide one byte of input more than needed in
             this case.
             </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput().
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.AttemptRead">
            <summary>
            Continue decoding header from <see cref="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.input"/> until more bits are needed or decoding has been completed
            </summary>
            <returns>Returns whether decoding could be completed</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.LiteralLengthTree">
            <summary>
            Get literal/length huffman tree, must not be used before <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.AttemptRead"/> has returned true
            </summary>
            <exception cref="T:System.IO.InvalidDataException">If hader has not been successfully read by the state machine</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.DistanceTree">
            <summary>
            Get distance huffman tree, must not be used before <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader.AttemptRead"/> has returned true
            </summary>
            <exception cref="T:System.IO.InvalidDataException">If hader has not been successfully read by the state machine</exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
             <summary>
             This class is general purpose class for writing data to a buffer.
            
             It allows you to write bits as well as bytes
             Based on DeflaterPending.java
            
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buffer">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Span{System.Byte})">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output buffer.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Span{System.Byte})">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.TryGetBits(System.Int32,System.Int32@,System.Int32)">
            <summary>
            Tries to grab the next <paramref name="bitCount"/> bits from the input and
            sets <paramref name="output"/> to the value, adding <paramref name="outputOffset"/>.
            </summary>
            <returns>true if enough bits could be read, otherwise false</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.TryGetBits(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Tries to grab the next <paramref name="bitCount"/> bits from the input and
            sets <paramref name="index"/> of <paramref name="array"/> to the value.
            </summary>
            <returns>true if enough bits could be read, otherwise false</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
    </members>
</doc>
